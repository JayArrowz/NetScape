### YamlMime:ManagedReference
items:
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  commentId: T:NetScape.Abstractions.Extensions.BinaryStreamExtensions
  id: BinaryStreamExtensions
  parent: NetScape.Abstractions.Extensions
  children:
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardChar(System.IO.BinaryReader)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardInt(System.IO.BinaryReader)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardShort(System.IO.BinaryReader)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt16BigEndian(System.IO.BinaryReader)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt32BigEndian(System.IO.BinaryReader)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadNullTerminatedString(System.IO.BinaryReader)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt16BigEndian(System.IO.BinaryReader)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt24BigEndian(System.IO.BinaryReader)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt32BigEndian(System.IO.BinaryReader)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt48BigEndian(System.IO.BinaryReader)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteAwkwardInt(System.IO.BinaryWriter,System.Int32)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt16BigEndian(System.IO.BinaryWriter,System.Int16)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt32BigEndian(System.IO.BinaryWriter,System.Int32)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteNullTerminatedString(System.IO.BinaryWriter,System.String)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt16BigEndian(System.IO.BinaryWriter,System.UInt16)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt24BigEndian(System.IO.BinaryWriter,System.Int32)
  - NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt32BigEndian(System.IO.BinaryWriter,System.UInt32)
  langs:
  - csharp
  - vb
  name: BinaryStreamExtensions
  nameWithType: BinaryStreamExtensions
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  type: Class
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: BinaryStreamExtensions
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 7
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  syntax:
    content: public static class BinaryStreamExtensions
    content.vb: Public Module BinaryStreamExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt16BigEndian(System.IO.BinaryReader)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt16BigEndian(System.IO.BinaryReader)
  id: ReadInt16BigEndian(System.IO.BinaryReader)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: ReadInt16BigEndian(BinaryReader)
  nameWithType: BinaryStreamExtensions.ReadInt16BigEndian(BinaryReader)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt16BigEndian(System.IO.BinaryReader)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: ReadInt16BigEndian
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 12
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  summary: "\nReads a 2-byte signed big endian integer and advances the current position of the stream by 2 bytes.\n"
  example: []
  syntax:
    content: public static short ReadInt16BigEndian(this BinaryReader reader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
    return:
      type: System.Int16
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadInt16BigEndian(reader As BinaryReader) As Short
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt16BigEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt32BigEndian(System.IO.BinaryReader)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt32BigEndian(System.IO.BinaryReader)
  id: ReadInt32BigEndian(System.IO.BinaryReader)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: ReadInt32BigEndian(BinaryReader)
  nameWithType: BinaryStreamExtensions.ReadInt32BigEndian(BinaryReader)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt32BigEndian(System.IO.BinaryReader)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: ReadInt32BigEndian
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 20
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  summary: "\nReads a 4-byte signed big endian integer and advances the current position of the stream by 4 bytes.\n"
  example: []
  syntax:
    content: public static int ReadInt32BigEndian(this BinaryReader reader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadInt32BigEndian(reader As BinaryReader) As Integer
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt32BigEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt16BigEndian(System.IO.BinaryReader)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt16BigEndian(System.IO.BinaryReader)
  id: ReadUInt16BigEndian(System.IO.BinaryReader)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: ReadUInt16BigEndian(BinaryReader)
  nameWithType: BinaryStreamExtensions.ReadUInt16BigEndian(BinaryReader)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt16BigEndian(System.IO.BinaryReader)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: ReadUInt16BigEndian
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 28
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  summary: "\nReads a 2-byte unsigned big endian integer and advances the current position of the stream by 2 bytes.\n"
  example: []
  syntax:
    content: public static ushort ReadUInt16BigEndian(this BinaryReader reader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
    return:
      type: System.UInt16
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadUInt16BigEndian(reader As BinaryReader) As UShort
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt16BigEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt24BigEndian(System.IO.BinaryReader)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt24BigEndian(System.IO.BinaryReader)
  id: ReadUInt24BigEndian(System.IO.BinaryReader)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: ReadUInt24BigEndian(BinaryReader)
  nameWithType: BinaryStreamExtensions.ReadUInt24BigEndian(BinaryReader)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt24BigEndian(System.IO.BinaryReader)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: ReadUInt24BigEndian
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 36
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  summary: "\nReads a 3-byte unsigned big endian integer and advances the current position of the stream by 3 bytes.\n"
  example: []
  syntax:
    content: public static int ReadUInt24BigEndian(this BinaryReader reader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
    return:
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadUInt24BigEndian(reader As BinaryReader) As Integer
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt24BigEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt32BigEndian(System.IO.BinaryReader)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt32BigEndian(System.IO.BinaryReader)
  id: ReadUInt32BigEndian(System.IO.BinaryReader)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: ReadUInt32BigEndian(BinaryReader)
  nameWithType: BinaryStreamExtensions.ReadUInt32BigEndian(BinaryReader)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt32BigEndian(System.IO.BinaryReader)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: ReadUInt32BigEndian
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 44
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  summary: "\nReads a 4-byte unsigned big endian integer and advances the current position of the stream by 4 bytes.\n"
  example: []
  syntax:
    content: public static uint ReadUInt32BigEndian(this BinaryReader reader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
    return:
      type: System.UInt32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadUInt32BigEndian(reader As BinaryReader) As UInteger
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt32BigEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt48BigEndian(System.IO.BinaryReader)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt48BigEndian(System.IO.BinaryReader)
  id: ReadUInt48BigEndian(System.IO.BinaryReader)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: ReadUInt48BigEndian(BinaryReader)
  nameWithType: BinaryStreamExtensions.ReadUInt48BigEndian(BinaryReader)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt48BigEndian(System.IO.BinaryReader)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: ReadUInt48BigEndian
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 53
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  summary: "\nReads a 6-byte unsigned big endian integer and advances the current position of the stream by 6 bytes.\n"
  example: []
  syntax:
    content: public static long ReadUInt48BigEndian(this BinaryReader reader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
    return:
      type: System.Int64
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadUInt48BigEndian(reader As BinaryReader) As Long
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt48BigEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt16BigEndian(System.IO.BinaryWriter,System.Int16)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt16BigEndian(System.IO.BinaryWriter,System.Int16)
  id: WriteInt16BigEndian(System.IO.BinaryWriter,System.Int16)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: WriteInt16BigEndian(BinaryWriter, Int16)
  nameWithType: BinaryStreamExtensions.WriteInt16BigEndian(BinaryWriter, Int16)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt16BigEndian(System.IO.BinaryWriter, System.Int16)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: WriteInt16BigEndian
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 59
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  syntax:
    content: public static void WriteInt16BigEndian(this BinaryWriter writer, short value)
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
    - id: value
      type: System.Int16
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteInt16BigEndian(writer As BinaryWriter, value As Short)
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt16BigEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt32BigEndian(System.IO.BinaryWriter,System.Int32)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt32BigEndian(System.IO.BinaryWriter,System.Int32)
  id: WriteInt32BigEndian(System.IO.BinaryWriter,System.Int32)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: WriteInt32BigEndian(BinaryWriter, Int32)
  nameWithType: BinaryStreamExtensions.WriteInt32BigEndian(BinaryWriter, Int32)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt32BigEndian(System.IO.BinaryWriter, System.Int32)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: WriteInt32BigEndian
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 65
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  syntax:
    content: public static void WriteInt32BigEndian(this BinaryWriter writer, int value)
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
    - id: value
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteInt32BigEndian(writer As BinaryWriter, value As Integer)
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt32BigEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt16BigEndian(System.IO.BinaryWriter,System.UInt16)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt16BigEndian(System.IO.BinaryWriter,System.UInt16)
  id: WriteUInt16BigEndian(System.IO.BinaryWriter,System.UInt16)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: WriteUInt16BigEndian(BinaryWriter, UInt16)
  nameWithType: BinaryStreamExtensions.WriteUInt16BigEndian(BinaryWriter, UInt16)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt16BigEndian(System.IO.BinaryWriter, System.UInt16)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: WriteUInt16BigEndian
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 73
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  syntax:
    content: public static void WriteUInt16BigEndian(this BinaryWriter writer, ushort value)
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
    - id: value
      type: System.UInt16
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteUInt16BigEndian(writer As BinaryWriter, value As UShort)
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt16BigEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt24BigEndian(System.IO.BinaryWriter,System.Int32)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt24BigEndian(System.IO.BinaryWriter,System.Int32)
  id: WriteUInt24BigEndian(System.IO.BinaryWriter,System.Int32)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: WriteUInt24BigEndian(BinaryWriter, Int32)
  nameWithType: BinaryStreamExtensions.WriteUInt24BigEndian(BinaryWriter, Int32)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt24BigEndian(System.IO.BinaryWriter, System.Int32)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: WriteUInt24BigEndian
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 79
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  syntax:
    content: public static void WriteUInt24BigEndian(this BinaryWriter writer, int value)
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
    - id: value
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteUInt24BigEndian(writer As BinaryWriter, value As Integer)
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt24BigEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt32BigEndian(System.IO.BinaryWriter,System.UInt32)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt32BigEndian(System.IO.BinaryWriter,System.UInt32)
  id: WriteUInt32BigEndian(System.IO.BinaryWriter,System.UInt32)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: WriteUInt32BigEndian(BinaryWriter, UInt32)
  nameWithType: BinaryStreamExtensions.WriteUInt32BigEndian(BinaryWriter, UInt32)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt32BigEndian(System.IO.BinaryWriter, System.UInt32)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: WriteUInt32BigEndian
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 86
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  syntax:
    content: public static void WriteUInt32BigEndian(this BinaryWriter writer, uint value)
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
    - id: value
      type: System.UInt32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteUInt32BigEndian(writer As BinaryWriter, value As UInteger)
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt32BigEndian*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadNullTerminatedString(System.IO.BinaryReader)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadNullTerminatedString(System.IO.BinaryReader)
  id: ReadNullTerminatedString(System.IO.BinaryReader)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: ReadNullTerminatedString(BinaryReader)
  nameWithType: BinaryStreamExtensions.ReadNullTerminatedString(BinaryReader)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadNullTerminatedString(System.IO.BinaryReader)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: ReadNullTerminatedString
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 110
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  summary: "\nReads characters based on the current stream text encoding into a string until \\0 or EOF occurs.\n"
  example: []
  syntax:
    content: public static string ReadNullTerminatedString(this BinaryReader reader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
    return:
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadNullTerminatedString(reader As BinaryReader) As String
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadNullTerminatedString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardChar(System.IO.BinaryReader)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardChar(System.IO.BinaryReader)
  id: ReadAwkwardChar(System.IO.BinaryReader)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: ReadAwkwardChar(BinaryReader)
  nameWithType: BinaryStreamExtensions.ReadAwkwardChar(BinaryReader)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardChar(System.IO.BinaryReader)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: ReadAwkwardChar
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 142
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  summary: "\nReads a byte, and turns it into a char using some awkward ruleset Jagex came up with.\nI mean...\nIt could&apos;ve just been a regular char.\nBut no, that would&apos;ve been too normal for Jagex.\n"
  example: []
  syntax:
    content: public static char ReadAwkwardChar(this BinaryReader reader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: ''
    return:
      type: System.Char
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadAwkwardChar(reader As BinaryReader) As Char
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardChar*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardInt(System.IO.BinaryReader)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardInt(System.IO.BinaryReader)
  id: ReadAwkwardInt(System.IO.BinaryReader)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: ReadAwkwardInt(BinaryReader)
  nameWithType: BinaryStreamExtensions.ReadAwkwardInt(BinaryReader)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardInt(System.IO.BinaryReader)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: ReadAwkwardInt
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 171
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  summary: "\nReads either an unsigned int or an unsigned short depending on the first byte read.\nOh if the short is its maximum value -1 is returned. Wat?\n"
  example: []
  syntax:
    content: public static int ReadAwkwardInt(this BinaryReader reader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadAwkwardInt(reader As BinaryReader) As Integer
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardInt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardShort(System.IO.BinaryReader)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardShort(System.IO.BinaryReader)
  id: ReadAwkwardShort(System.IO.BinaryReader)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: ReadAwkwardShort(BinaryReader)
  nameWithType: BinaryStreamExtensions.ReadAwkwardShort(BinaryReader)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardShort(System.IO.BinaryReader)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: ReadAwkwardShort
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 188
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  summary: "\nReads either a byte or an unsigned short depending on the first byte read.\n"
  example: []
  syntax:
    content: public static short ReadAwkwardShort(this BinaryReader reader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: ''
    return:
      type: System.Int16
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ReadAwkwardShort(reader As BinaryReader) As Short
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardShort*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteNullTerminatedString(System.IO.BinaryWriter,System.String)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteNullTerminatedString(System.IO.BinaryWriter,System.String)
  id: WriteNullTerminatedString(System.IO.BinaryWriter,System.String)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: WriteNullTerminatedString(BinaryWriter, String)
  nameWithType: BinaryStreamExtensions.WriteNullTerminatedString(BinaryWriter, String)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteNullTerminatedString(System.IO.BinaryWriter, System.String)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: WriteNullTerminatedString
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 203
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  summary: "\nWrites characters into a string and suffixes it with \\0.\n"
  example: []
  syntax:
    content: public static void WriteNullTerminatedString(this BinaryWriter writer, string str)
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
    - id: str
      type: System.String
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteNullTerminatedString(writer As BinaryWriter, str As String)
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteNullTerminatedString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteAwkwardInt(System.IO.BinaryWriter,System.Int32)
  commentId: M:NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteAwkwardInt(System.IO.BinaryWriter,System.Int32)
  id: WriteAwkwardInt(System.IO.BinaryWriter,System.Int32)
  isExtensionMethod: true
  parent: NetScape.Abstractions.Extensions.BinaryStreamExtensions
  langs:
  - csharp
  - vb
  name: WriteAwkwardInt(BinaryWriter, Int32)
  nameWithType: BinaryStreamExtensions.WriteAwkwardInt(BinaryWriter, Int32)
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteAwkwardInt(System.IO.BinaryWriter, System.Int32)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: WriteAwkwardInt
    path: src/NetScape.Abstractions/Extensions/BinaryStreamExtensions.cs
    startLine: 209
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Extensions
  syntax:
    content: public static void WriteAwkwardInt(this BinaryWriter writer, int value)
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
    - id: value
      type: System.Int32
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteAwkwardInt(writer As BinaryWriter, value As Integer)
  overload: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteAwkwardInt*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NetScape.Abstractions.Extensions
  commentId: N:NetScape.Abstractions.Extensions
  name: NetScape.Abstractions.Extensions
  nameWithType: NetScape.Abstractions.Extensions
  fullName: NetScape.Abstractions.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt16BigEndian*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt16BigEndian
  name: ReadInt16BigEndian
  nameWithType: BinaryStreamExtensions.ReadInt16BigEndian
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt16BigEndian
- uid: System.IO.BinaryReader
  commentId: T:System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt32BigEndian*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt32BigEndian
  name: ReadInt32BigEndian
  nameWithType: BinaryStreamExtensions.ReadInt32BigEndian
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadInt32BigEndian
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt16BigEndian*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt16BigEndian
  name: ReadUInt16BigEndian
  nameWithType: BinaryStreamExtensions.ReadUInt16BigEndian
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt16BigEndian
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt24BigEndian*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt24BigEndian
  name: ReadUInt24BigEndian
  nameWithType: BinaryStreamExtensions.ReadUInt24BigEndian
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt24BigEndian
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt32BigEndian*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt32BigEndian
  name: ReadUInt32BigEndian
  nameWithType: BinaryStreamExtensions.ReadUInt32BigEndian
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt32BigEndian
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt48BigEndian*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt48BigEndian
  name: ReadUInt48BigEndian
  nameWithType: BinaryStreamExtensions.ReadUInt48BigEndian
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadUInt48BigEndian
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt16BigEndian*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt16BigEndian
  name: WriteInt16BigEndian
  nameWithType: BinaryStreamExtensions.WriteInt16BigEndian
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt16BigEndian
- uid: System.IO.BinaryWriter
  commentId: T:System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt32BigEndian*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt32BigEndian
  name: WriteInt32BigEndian
  nameWithType: BinaryStreamExtensions.WriteInt32BigEndian
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteInt32BigEndian
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt16BigEndian*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt16BigEndian
  name: WriteUInt16BigEndian
  nameWithType: BinaryStreamExtensions.WriteUInt16BigEndian
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt16BigEndian
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt24BigEndian*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt24BigEndian
  name: WriteUInt24BigEndian
  nameWithType: BinaryStreamExtensions.WriteUInt24BigEndian
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt24BigEndian
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt32BigEndian*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt32BigEndian
  name: WriteUInt32BigEndian
  nameWithType: BinaryStreamExtensions.WriteUInt32BigEndian
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteUInt32BigEndian
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadNullTerminatedString*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadNullTerminatedString
  name: ReadNullTerminatedString
  nameWithType: BinaryStreamExtensions.ReadNullTerminatedString
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadNullTerminatedString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardChar*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardChar
  name: ReadAwkwardChar
  nameWithType: BinaryStreamExtensions.ReadAwkwardChar
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardChar
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardInt*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardInt
  name: ReadAwkwardInt
  nameWithType: BinaryStreamExtensions.ReadAwkwardInt
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardInt
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardShort*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardShort
  name: ReadAwkwardShort
  nameWithType: BinaryStreamExtensions.ReadAwkwardShort
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.ReadAwkwardShort
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteNullTerminatedString*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteNullTerminatedString
  name: WriteNullTerminatedString
  nameWithType: BinaryStreamExtensions.WriteNullTerminatedString
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteNullTerminatedString
- uid: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteAwkwardInt*
  commentId: Overload:NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteAwkwardInt
  name: WriteAwkwardInt
  nameWithType: BinaryStreamExtensions.WriteAwkwardInt
  fullName: NetScape.Abstractions.Extensions.BinaryStreamExtensions.WriteAwkwardInt
