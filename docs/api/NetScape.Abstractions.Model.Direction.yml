### YamlMime:ManagedReference
items:
- uid: NetScape.Abstractions.Model.Direction
  commentId: T:NetScape.Abstractions.Model.Direction
  id: Direction
  parent: NetScape.Abstractions.Model
  children:
  - NetScape.Abstractions.Model.Direction.Between(NetScape.Abstractions.Model.Position,NetScape.Abstractions.Model.Position)
  - NetScape.Abstractions.Model.Direction.DeltaX
  - NetScape.Abstractions.Model.Direction.DeltaY
  - NetScape.Abstractions.Model.Direction.Diagonal
  - NetScape.Abstractions.Model.Direction.DiagonalComponents(NetScape.Abstractions.Model.Direction)
  - NetScape.Abstractions.Model.Direction.East
  - NetScape.Abstractions.Model.Direction.EMPTY_DIRECTION_ARRAY
  - NetScape.Abstractions.Model.Direction.FromDeltas(System.Int32,System.Int32)
  - NetScape.Abstractions.Model.Direction.IntValue
  - NetScape.Abstractions.Model.Direction.NESW
  - NetScape.Abstractions.Model.Direction.None
  - NetScape.Abstractions.Model.Direction.North
  - NetScape.Abstractions.Model.Direction.NorthEast
  - NetScape.Abstractions.Model.Direction.NorthWest
  - NetScape.Abstractions.Model.Direction.Opposite
  - NetScape.Abstractions.Model.Direction.Ordinal
  - NetScape.Abstractions.Model.Direction.South
  - NetScape.Abstractions.Model.Direction.SouthEast
  - NetScape.Abstractions.Model.Direction.SouthWest
  - NetScape.Abstractions.Model.Direction.ToOrientationInteger
  - NetScape.Abstractions.Model.Direction.ToString
  - NetScape.Abstractions.Model.Direction.Value
  - NetScape.Abstractions.Model.Direction.valueOf(System.String)
  - NetScape.Abstractions.Model.Direction.West
  - NetScape.Abstractions.Model.Direction.WNES
  - NetScape.Abstractions.Model.Direction.WNES_DIAGONAL
  langs:
  - csharp
  - vb
  name: Direction
  nameWithType: Direction
  fullName: NetScape.Abstractions.Model.Direction
  type: Class
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Direction
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 4
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public sealed class Direction
    content.vb: Public NotInheritable Class Direction
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: NetScape.Abstractions.Model.Direction.None
  commentId: F:NetScape.Abstractions.Model.Direction.None
  id: None
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: None
  nameWithType: Direction.None
  fullName: NetScape.Abstractions.Model.Direction.None
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: None
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 6
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public static readonly Direction None
    return:
      type: NetScape.Abstractions.Model.Direction
    content.vb: Public Shared ReadOnly None As Direction
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.NorthWest
  commentId: F:NetScape.Abstractions.Model.Direction.NorthWest
  id: NorthWest
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: NorthWest
  nameWithType: Direction.NorthWest
  fullName: NetScape.Abstractions.Model.Direction.NorthWest
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: NorthWest
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 7
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public static readonly Direction NorthWest
    return:
      type: NetScape.Abstractions.Model.Direction
    content.vb: Public Shared ReadOnly NorthWest As Direction
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.North
  commentId: F:NetScape.Abstractions.Model.Direction.North
  id: North
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: North
  nameWithType: Direction.North
  fullName: NetScape.Abstractions.Model.Direction.North
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: North
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 8
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public static readonly Direction North
    return:
      type: NetScape.Abstractions.Model.Direction
    content.vb: Public Shared ReadOnly North As Direction
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.NorthEast
  commentId: F:NetScape.Abstractions.Model.Direction.NorthEast
  id: NorthEast
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: NorthEast
  nameWithType: Direction.NorthEast
  fullName: NetScape.Abstractions.Model.Direction.NorthEast
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: NorthEast
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 9
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public static readonly Direction NorthEast
    return:
      type: NetScape.Abstractions.Model.Direction
    content.vb: Public Shared ReadOnly NorthEast As Direction
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.West
  commentId: F:NetScape.Abstractions.Model.Direction.West
  id: West
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: West
  nameWithType: Direction.West
  fullName: NetScape.Abstractions.Model.Direction.West
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: West
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 10
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public static readonly Direction West
    return:
      type: NetScape.Abstractions.Model.Direction
    content.vb: Public Shared ReadOnly West As Direction
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.East
  commentId: F:NetScape.Abstractions.Model.Direction.East
  id: East
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: East
  nameWithType: Direction.East
  fullName: NetScape.Abstractions.Model.Direction.East
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: East
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 11
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public static readonly Direction East
    return:
      type: NetScape.Abstractions.Model.Direction
    content.vb: Public Shared ReadOnly East As Direction
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.SouthWest
  commentId: F:NetScape.Abstractions.Model.Direction.SouthWest
  id: SouthWest
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: SouthWest
  nameWithType: Direction.SouthWest
  fullName: NetScape.Abstractions.Model.Direction.SouthWest
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: SouthWest
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 12
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public static readonly Direction SouthWest
    return:
      type: NetScape.Abstractions.Model.Direction
    content.vb: Public Shared ReadOnly SouthWest As Direction
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.South
  commentId: F:NetScape.Abstractions.Model.Direction.South
  id: South
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: South
  nameWithType: Direction.South
  fullName: NetScape.Abstractions.Model.Direction.South
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: South
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 13
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public static readonly Direction South
    return:
      type: NetScape.Abstractions.Model.Direction
    content.vb: Public Shared ReadOnly South As Direction
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.SouthEast
  commentId: F:NetScape.Abstractions.Model.Direction.SouthEast
  id: SouthEast
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: SouthEast
  nameWithType: Direction.SouthEast
  fullName: NetScape.Abstractions.Model.Direction.SouthEast
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: SouthEast
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 14
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public static readonly Direction SouthEast
    return:
      type: NetScape.Abstractions.Model.Direction
    content.vb: Public Shared ReadOnly SouthEast As Direction
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.Value
  commentId: P:NetScape.Abstractions.Model.Direction.Value
  id: Value
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Direction.Value
  fullName: NetScape.Abstractions.Model.Direction.Value
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Value
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 44
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public Direction.InnerDirectionValue Value { get; }
    parameters: []
    return:
      type: NetScape.Abstractions.Model.Direction.InnerDirectionValue
    content.vb: Public ReadOnly Property Value As Direction.InnerDirectionValue
  overload: NetScape.Abstractions.Model.Direction.Value*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.EMPTY_DIRECTION_ARRAY
  commentId: F:NetScape.Abstractions.Model.Direction.EMPTY_DIRECTION_ARRAY
  id: EMPTY_DIRECTION_ARRAY
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: EMPTY_DIRECTION_ARRAY
  nameWithType: Direction.EMPTY_DIRECTION_ARRAY
  fullName: NetScape.Abstractions.Model.Direction.EMPTY_DIRECTION_ARRAY
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: EMPTY_DIRECTION_ARRAY
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 52
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nAn empty direction array.\n"
  example: []
  syntax:
    content: public static readonly Direction[] EMPTY_DIRECTION_ARRAY
    return:
      type: NetScape.Abstractions.Model.Direction[]
    content.vb: Public Shared ReadOnly EMPTY_DIRECTION_ARRAY As Direction()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.NESW
  commentId: F:NetScape.Abstractions.Model.Direction.NESW
  id: NESW
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: NESW
  nameWithType: Direction.NESW
  fullName: NetScape.Abstractions.Model.Direction.NESW
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: NESW
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 57
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nAn array of directions without any diagonal directions.\n"
  example: []
  syntax:
    content: public static readonly Direction[] NESW
    return:
      type: NetScape.Abstractions.Model.Direction[]
    content.vb: Public Shared ReadOnly NESW As Direction()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.WNES
  commentId: F:NetScape.Abstractions.Model.Direction.WNES
  id: WNES
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: WNES
  nameWithType: Direction.WNES
  fullName: NetScape.Abstractions.Model.Direction.WNES
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: WNES
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 63
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nAn array of directions without any diagonal directions, and one step counter-clockwise, as used by\nthe clients collision mapping.\n"
  example: []
  syntax:
    content: public static readonly Direction[] WNES
    return:
      type: NetScape.Abstractions.Model.Direction[]
    content.vb: Public Shared ReadOnly WNES As Direction()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.WNES_DIAGONAL
  commentId: F:NetScape.Abstractions.Model.Direction.WNES_DIAGONAL
  id: WNES_DIAGONAL
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: WNES_DIAGONAL
  nameWithType: Direction.WNES_DIAGONAL
  fullName: NetScape.Abstractions.Model.Direction.WNES_DIAGONAL
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: WNES_DIAGONAL
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 69
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nAn array of diagonal directions, and one step counter-clockwise, as used by the clients collision\nmapping.\n"
  example: []
  syntax:
    content: public static readonly Direction[] WNES_DIAGONAL
    return:
      type: NetScape.Abstractions.Model.Direction[]
    content.vb: Public Shared ReadOnly WNES_DIAGONAL As Direction()
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.Between(NetScape.Abstractions.Model.Position,NetScape.Abstractions.Model.Position)
  commentId: M:NetScape.Abstractions.Model.Direction.Between(NetScape.Abstractions.Model.Position,NetScape.Abstractions.Model.Position)
  id: Between(NetScape.Abstractions.Model.Position,NetScape.Abstractions.Model.Position)
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: Between(Position, Position)
  nameWithType: Direction.Between(Position, Position)
  fullName: NetScape.Abstractions.Model.Direction.Between(NetScape.Abstractions.Model.Position, NetScape.Abstractions.Model.Position)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Between
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 77
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the Direction between the two <xref href=\"NetScape.Abstractions.Model.Position\" data-throw-if-not-resolved=\"false\"></xref>s..\n"
  example: []
  syntax:
    content: public static Direction Between(Position current, Position next)
    parameters:
    - id: current
      type: NetScape.Abstractions.Model.Position
      description: 'The difference between two X coordinates. '
    - id: next
      type: NetScape.Abstractions.Model.Position
      description: 'The difference between two Y coordinates. '
    return:
      type: NetScape.Abstractions.Model.Direction
      description: 'The direction. '
    content.vb: Public Shared Function Between(current As Position, next As Position) As Direction
  overload: NetScape.Abstractions.Model.Direction.Between*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Model.Direction.FromDeltas(System.Int32,System.Int32)
  commentId: M:NetScape.Abstractions.Model.Direction.FromDeltas(System.Int32,System.Int32)
  id: FromDeltas(System.Int32,System.Int32)
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: FromDeltas(Int32, Int32)
  nameWithType: Direction.FromDeltas(Int32, Int32)
  fullName: NetScape.Abstractions.Model.Direction.FromDeltas(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: FromDeltas
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 91
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nCreates a direction from the differences between X and Y.\n"
  example: []
  syntax:
    content: public static Direction FromDeltas(int deltaX, int deltaY)
    parameters:
    - id: deltaX
      type: System.Int32
      description: 'The difference between two X coordinates. '
    - id: deltaY
      type: System.Int32
      description: 'The difference between two Y coordinates. '
    return:
      type: NetScape.Abstractions.Model.Direction
      description: 'The direction. '
    content.vb: Public Shared Function FromDeltas(deltaX As Integer, deltaY As Integer) As Direction
  overload: NetScape.Abstractions.Model.Direction.FromDeltas*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Model.Direction.DiagonalComponents(NetScape.Abstractions.Model.Direction)
  commentId: M:NetScape.Abstractions.Model.Direction.DiagonalComponents(NetScape.Abstractions.Model.Direction)
  id: DiagonalComponents(NetScape.Abstractions.Model.Direction)
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: DiagonalComponents(Direction)
  nameWithType: Direction.DiagonalComponents(Direction)
  fullName: NetScape.Abstractions.Model.Direction.DiagonalComponents(NetScape.Abstractions.Model.Direction)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: DiagonalComponents
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 147
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGet the 2 directions which make up a diagonal direction (i.e., NORTH and EAST for NORTH_EAST).\n"
  example: []
  syntax:
    content: public static Direction[] DiagonalComponents(Direction direction)
    parameters:
    - id: direction
      type: NetScape.Abstractions.Model.Direction
      description: 'The direction to get the components for. '
    return:
      type: NetScape.Abstractions.Model.Direction[]
      description: 'The components for the given direction. '
    content.vb: Public Shared Function DiagonalComponents(direction As Direction) As Direction()
  overload: NetScape.Abstractions.Model.Direction.DiagonalComponents*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: NetScape.Abstractions.Model.Direction.Opposite
  commentId: M:NetScape.Abstractions.Model.Direction.Opposite
  id: Opposite
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: Opposite()
  nameWithType: Direction.Opposite()
  fullName: NetScape.Abstractions.Model.Direction.Opposite()
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Opposite
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 185
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the opposite direction of the this direction.\n"
  example: []
  syntax:
    content: public Direction Opposite()
    return:
      type: NetScape.Abstractions.Model.Direction
      description: 'The opposite direction. '
    content.vb: Public Function Opposite As Direction
  overload: NetScape.Abstractions.Model.Direction.Opposite*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Direction.DeltaX
  commentId: M:NetScape.Abstractions.Model.Direction.DeltaX
  id: DeltaX
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: DeltaX()
  nameWithType: Direction.DeltaX()
  fullName: NetScape.Abstractions.Model.Direction.DeltaX()
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: DeltaX
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 213
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the X delta from a <xref href=\"NetScape.Abstractions.Model.Position\" data-throw-if-not-resolved=\"false\"></xref> of (0, 0).\n"
  example: []
  syntax:
    content: public int DeltaX()
    return:
      type: System.Int32
      description: 'The delta of X from (0, 0). '
    content.vb: Public Function DeltaX As Integer
  overload: NetScape.Abstractions.Model.Direction.DeltaX*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Direction.DeltaY
  commentId: M:NetScape.Abstractions.Model.Direction.DeltaY
  id: DeltaY
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: DeltaY()
  nameWithType: Direction.DeltaY()
  fullName: NetScape.Abstractions.Model.Direction.DeltaY()
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: DeltaY
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 234
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the Y delta from a <xref href=\"NetScape.Abstractions.Model.Position\" data-throw-if-not-resolved=\"false\"></xref> of (0, 0).\n"
  example: []
  syntax:
    content: public int DeltaY()
    return:
      type: System.Int32
      description: 'The delta of Y from (0, 0). '
    content.vb: Public Function DeltaY As Integer
  overload: NetScape.Abstractions.Model.Direction.DeltaY*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Direction.Diagonal
  commentId: P:NetScape.Abstractions.Model.Direction.Diagonal
  id: Diagonal
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: Diagonal
  nameWithType: Direction.Diagonal
  fullName: NetScape.Abstractions.Model.Direction.Diagonal
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Diagonal
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 255
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nCheck if this direction is a diagonal direction.\n"
  example: []
  syntax:
    content: public bool Diagonal { get; }
    parameters: []
    return:
      type: System.Boolean
      description: '{@code true} if this direction is a diagonal direction, {@code false} otherwise. '
    content.vb: Public ReadOnly Property Diagonal As Boolean
  overload: NetScape.Abstractions.Model.Direction.Diagonal*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.IntValue
  commentId: P:NetScape.Abstractions.Model.Direction.IntValue
  id: IntValue
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: IntValue
  nameWithType: Direction.IntValue
  fullName: NetScape.Abstractions.Model.Direction.IntValue
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: IntValue
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 267
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the direction as an integer which the client can understand.\n"
  example: []
  syntax:
    content: public int IntValue { get; }
    parameters: []
    return:
      type: System.Int32
      description: 'The movement as an integer. '
    content.vb: Public ReadOnly Property IntValue As Integer
  overload: NetScape.Abstractions.Model.Direction.IntValue*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NetScape.Abstractions.Model.Direction.ToOrientationInteger
  commentId: M:NetScape.Abstractions.Model.Direction.ToOrientationInteger
  id: ToOrientationInteger
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: ToOrientationInteger()
  nameWithType: Direction.ToOrientationInteger()
  fullName: NetScape.Abstractions.Model.Direction.ToOrientationInteger()
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: ToOrientationInteger
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 274
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the direction as an integer as used orientation in the client maps (WNES as opposed to NESW).\n"
  example: []
  syntax:
    content: public int ToOrientationInteger()
    return:
      type: System.Int32
      description: 'The direction as an integer. '
    content.vb: Public Function ToOrientationInteger As Integer
  overload: NetScape.Abstractions.Model.Direction.ToOrientationInteger*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Direction.Ordinal
  commentId: M:NetScape.Abstractions.Model.Direction.Ordinal
  id: Ordinal
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: Ordinal()
  nameWithType: Direction.Ordinal()
  fullName: NetScape.Abstractions.Model.Direction.Ordinal()
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Ordinal
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 296
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public int Ordinal()
    return:
      type: System.Int32
    content.vb: Public Function Ordinal As Integer
  overload: NetScape.Abstractions.Model.Direction.Ordinal*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Direction.ToString
  commentId: M:NetScape.Abstractions.Model.Direction.ToString
  id: ToString
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Direction.ToString()
  fullName: NetScape.Abstractions.Model.Direction.ToString()
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: ToString
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 301
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: NetScape.Abstractions.Model.Direction.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NetScape.Abstractions.Model.Direction.valueOf(System.String)
  commentId: M:NetScape.Abstractions.Model.Direction.valueOf(System.String)
  id: valueOf(System.String)
  parent: NetScape.Abstractions.Model.Direction
  langs:
  - csharp
  - vb
  name: valueOf(String)
  nameWithType: Direction.valueOf(String)
  fullName: NetScape.Abstractions.Model.Direction.valueOf(System.String)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Direction.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: valueOf
    path: src/NetScape.Abstractions/Model/Direction.cs
    startLine: 306
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public static Direction valueOf(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: NetScape.Abstractions.Model.Direction
    content.vb: Public Shared Function valueOf(name As String) As Direction
  overload: NetScape.Abstractions.Model.Direction.valueOf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: NetScape.Abstractions.Model
  commentId: N:NetScape.Abstractions.Model
  name: NetScape.Abstractions.Model
  nameWithType: NetScape.Abstractions.Model
  fullName: NetScape.Abstractions.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NetScape.Abstractions.Model.Direction
  commentId: T:NetScape.Abstractions.Model.Direction
  parent: NetScape.Abstractions.Model
  name: Direction
  nameWithType: Direction
  fullName: NetScape.Abstractions.Model.Direction
- uid: NetScape.Abstractions.Model.Direction.Value*
  commentId: Overload:NetScape.Abstractions.Model.Direction.Value
  name: Value
  nameWithType: Direction.Value
  fullName: NetScape.Abstractions.Model.Direction.Value
- uid: NetScape.Abstractions.Model.Direction.InnerDirectionValue
  commentId: T:NetScape.Abstractions.Model.Direction.InnerDirectionValue
  parent: NetScape.Abstractions.Model
  name: Direction.InnerDirectionValue
  nameWithType: Direction.InnerDirectionValue
  fullName: NetScape.Abstractions.Model.Direction.InnerDirectionValue
- uid: NetScape.Abstractions.Model.Direction[]
  isExternal: true
  name: Direction[]
  nameWithType: Direction[]
  fullName: NetScape.Abstractions.Model.Direction[]
  nameWithType.vb: Direction()
  fullName.vb: NetScape.Abstractions.Model.Direction()
  name.vb: Direction()
  spec.csharp:
  - uid: NetScape.Abstractions.Model.Direction
    name: Direction
    nameWithType: Direction
    fullName: NetScape.Abstractions.Model.Direction
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: NetScape.Abstractions.Model.Direction
    name: Direction
    nameWithType: Direction
    fullName: NetScape.Abstractions.Model.Direction
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: NetScape.Abstractions.Model.Position
  commentId: T:NetScape.Abstractions.Model.Position
  parent: NetScape.Abstractions.Model
  name: Position
  nameWithType: Position
  fullName: NetScape.Abstractions.Model.Position
- uid: NetScape.Abstractions.Model.Direction.Between*
  commentId: Overload:NetScape.Abstractions.Model.Direction.Between
  name: Between
  nameWithType: Direction.Between
  fullName: NetScape.Abstractions.Model.Direction.Between
- uid: NetScape.Abstractions.Model.Direction.FromDeltas*
  commentId: Overload:NetScape.Abstractions.Model.Direction.FromDeltas
  name: FromDeltas
  nameWithType: Direction.FromDeltas
  fullName: NetScape.Abstractions.Model.Direction.FromDeltas
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NetScape.Abstractions.Model.Direction.DiagonalComponents*
  commentId: Overload:NetScape.Abstractions.Model.Direction.DiagonalComponents
  name: DiagonalComponents
  nameWithType: Direction.DiagonalComponents
  fullName: NetScape.Abstractions.Model.Direction.DiagonalComponents
- uid: NetScape.Abstractions.Model.Direction.Opposite*
  commentId: Overload:NetScape.Abstractions.Model.Direction.Opposite
  name: Opposite
  nameWithType: Direction.Opposite
  fullName: NetScape.Abstractions.Model.Direction.Opposite
- uid: NetScape.Abstractions.Model.Direction.DeltaX*
  commentId: Overload:NetScape.Abstractions.Model.Direction.DeltaX
  name: DeltaX
  nameWithType: Direction.DeltaX
  fullName: NetScape.Abstractions.Model.Direction.DeltaX
- uid: NetScape.Abstractions.Model.Direction.DeltaY*
  commentId: Overload:NetScape.Abstractions.Model.Direction.DeltaY
  name: DeltaY
  nameWithType: Direction.DeltaY
  fullName: NetScape.Abstractions.Model.Direction.DeltaY
- uid: NetScape.Abstractions.Model.Direction.Diagonal*
  commentId: Overload:NetScape.Abstractions.Model.Direction.Diagonal
  name: Diagonal
  nameWithType: Direction.Diagonal
  fullName: NetScape.Abstractions.Model.Direction.Diagonal
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NetScape.Abstractions.Model.Direction.IntValue*
  commentId: Overload:NetScape.Abstractions.Model.Direction.IntValue
  name: IntValue
  nameWithType: Direction.IntValue
  fullName: NetScape.Abstractions.Model.Direction.IntValue
- uid: NetScape.Abstractions.Model.Direction.ToOrientationInteger*
  commentId: Overload:NetScape.Abstractions.Model.Direction.ToOrientationInteger
  name: ToOrientationInteger
  nameWithType: Direction.ToOrientationInteger
  fullName: NetScape.Abstractions.Model.Direction.ToOrientationInteger
- uid: NetScape.Abstractions.Model.Direction.Ordinal*
  commentId: Overload:NetScape.Abstractions.Model.Direction.Ordinal
  name: Ordinal
  nameWithType: Direction.Ordinal
  fullName: NetScape.Abstractions.Model.Direction.Ordinal
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NetScape.Abstractions.Model.Direction.ToString*
  commentId: Overload:NetScape.Abstractions.Model.Direction.ToString
  name: ToString
  nameWithType: Direction.ToString
  fullName: NetScape.Abstractions.Model.Direction.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: NetScape.Abstractions.Model.Direction.valueOf*
  commentId: Overload:NetScape.Abstractions.Model.Direction.valueOf
  name: valueOf
  nameWithType: Direction.valueOf
  fullName: NetScape.Abstractions.Model.Direction.valueOf
