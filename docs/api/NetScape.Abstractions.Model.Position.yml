### YamlMime:ManagedReference
items:
- uid: NetScape.Abstractions.Model.Position
  commentId: T:NetScape.Abstractions.Model.Position
  id: Position
  parent: NetScape.Abstractions.Model
  children:
  - NetScape.Abstractions.Model.Position.#ctor
  - NetScape.Abstractions.Model.Position.#ctor(System.Int32,System.Int32)
  - NetScape.Abstractions.Model.Position.#ctor(System.Int32,System.Int32,System.Int32)
  - NetScape.Abstractions.Model.Position.CentralRegionX
  - NetScape.Abstractions.Model.Position.CentralRegionY
  - NetScape.Abstractions.Model.Position.Equals(System.Object)
  - NetScape.Abstractions.Model.Position.GetDistance(NetScape.Abstractions.Model.Position)
  - NetScape.Abstractions.Model.Position.GetHashCode
  - NetScape.Abstractions.Model.Position.getLocalX(NetScape.Abstractions.Model.Position)
  - NetScape.Abstractions.Model.Position.GetLocalY(NetScape.Abstractions.Model.Position)
  - NetScape.Abstractions.Model.Position.GetLongestDelta(NetScape.Abstractions.Model.Position)
  - NetScape.Abstractions.Model.Position.Height
  - NetScape.Abstractions.Model.Position.HEIGHT_LEVELS
  - NetScape.Abstractions.Model.Position.Inside(NetScape.Abstractions.Model.Area.Region)
  - NetScape.Abstractions.Model.Position.IsWithinDistance(NetScape.Abstractions.Model.Position,System.Int32)
  - NetScape.Abstractions.Model.Position.LocalX
  - NetScape.Abstractions.Model.Position.LocalY
  - NetScape.Abstractions.Model.Position.MAX_DISTANCE
  - NetScape.Abstractions.Model.Position.RegionCoordinates
  - NetScape.Abstractions.Model.Position.Step(System.Int32,NetScape.Abstractions.Model.Direction)
  - NetScape.Abstractions.Model.Position.TopLeftRegionX
  - NetScape.Abstractions.Model.Position.TopLeftRegionY
  - NetScape.Abstractions.Model.Position.X
  - NetScape.Abstractions.Model.Position.Y
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: Position
  fullName: NetScape.Abstractions.Model.Position
  type: Class
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Position
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 12
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nRepresents a position in the world.\n\n@author Graham\n"
  example: []
  syntax:
    content: >-
      [Owned]

      public class Position
    content.vb: >-
      <Owned>

      Public Class Position
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.EntityFrameworkCore.OwnedAttribute
    ctor: Microsoft.EntityFrameworkCore.OwnedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NetScape.Abstractions.Model.Position.HEIGHT_LEVELS
  commentId: F:NetScape.Abstractions.Model.Position.HEIGHT_LEVELS
  id: HEIGHT_LEVELS
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: HEIGHT_LEVELS
  nameWithType: Position.HEIGHT_LEVELS
  fullName: NetScape.Abstractions.Model.Position.HEIGHT_LEVELS
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: HEIGHT_LEVELS
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 19
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nThe number of height levels, (0, 3] inclusive.\n"
  example: []
  syntax:
    content: public const int HEIGHT_LEVELS = 4
    return:
      type: System.Int32
    content.vb: Public Const HEIGHT_LEVELS As Integer = 4
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: NetScape.Abstractions.Model.Position.MAX_DISTANCE
  commentId: F:NetScape.Abstractions.Model.Position.MAX_DISTANCE
  id: MAX_DISTANCE
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: MAX_DISTANCE
  nameWithType: Position.MAX_DISTANCE
  fullName: NetScape.Abstractions.Model.Position.MAX_DISTANCE
  type: Field
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: MAX_DISTANCE
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 24
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nThe maximum distance players/NPCs can &apos;see&apos;.\n"
  example: []
  syntax:
    content: public const int MAX_DISTANCE = 15
    return:
      type: System.Int32
    content.vb: Public Const MAX_DISTANCE As Integer = 15
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: NetScape.Abstractions.Model.Position.#ctor(System.Int32,System.Int32)
  commentId: M:NetScape.Abstractions.Model.Position.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: Position(Int32, Int32)
  nameWithType: Position.Position(Int32, Int32)
  fullName: NetScape.Abstractions.Model.Position.Position(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: .ctor
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 31
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nCreates a position at the default height.\n"
  example: []
  syntax:
    content: public Position(int x, int y)
    parameters:
    - id: x
      type: System.Int32
      description: 'The x coordinate. '
    - id: y
      type: System.Int32
      description: 'The y coordinate. '
    content.vb: Public Sub New(x As Integer, y As Integer)
  overload: NetScape.Abstractions.Model.Position.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Position.#ctor
  commentId: M:NetScape.Abstractions.Model.Position.#ctor
  id: '#ctor'
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: Position()
  nameWithType: Position.Position()
  fullName: NetScape.Abstractions.Model.Position.Position()
  type: Constructor
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: .ctor
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 35
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public Position()
    content.vb: Public Sub New
  overload: NetScape.Abstractions.Model.Position.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Position.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:NetScape.Abstractions.Model.Position.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: Position(Int32, Int32, Int32)
  nameWithType: Position.Position(Int32, Int32, Int32)
  fullName: NetScape.Abstractions.Model.Position.Position(System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: .ctor
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 46
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nCreates a position with the specified height.\n"
  example: []
  syntax:
    content: public Position(int x, int y, int height)
    parameters:
    - id: x
      type: System.Int32
      description: 'The x coordinate. '
    - id: y
      type: System.Int32
      description: 'The y coordinate. '
    - id: height
      type: System.Int32
      description: 'The height. '
    content.vb: Public Sub New(x As Integer, y As Integer, height As Integer)
  overload: NetScape.Abstractions.Model.Position.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Position.Equals(System.Object)
  commentId: M:NetScape.Abstractions.Model.Position.Equals(System.Object)
  id: Equals(System.Object)
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Position.Equals(Object)
  fullName: NetScape.Abstractions.Model.Position.Equals(System.Object)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Equals
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 53
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: NetScape.Abstractions.Model.Position.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NetScape.Abstractions.Model.Position.CentralRegionX
  commentId: P:NetScape.Abstractions.Model.Position.CentralRegionX
  id: CentralRegionX
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: CentralRegionX
  nameWithType: Position.CentralRegionX
  fullName: NetScape.Abstractions.Model.Position.CentralRegionX
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: CentralRegionX
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 68
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the x coordinate of the central region.\n"
  example: []
  syntax:
    content: >-
      [NotMapped]

      public int CentralRegionX { get; }
    parameters: []
    return:
      type: System.Int32
      description: 'The x coordinate of the central region. '
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property CentralRegionX As Integer
  overload: NetScape.Abstractions.Model.Position.CentralRegionX*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NetScape.Abstractions.Model.Position.CentralRegionY
  commentId: P:NetScape.Abstractions.Model.Position.CentralRegionY
  id: CentralRegionY
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: CentralRegionY
  nameWithType: Position.CentralRegionY
  fullName: NetScape.Abstractions.Model.Position.CentralRegionY
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: CentralRegionY
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 81
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the y coordinate of the central region.\n"
  example: []
  syntax:
    content: >-
      [NotMapped]

      public int CentralRegionY { get; }
    parameters: []
    return:
      type: System.Int32
      description: 'The y coordinate of the central region. '
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property CentralRegionY As Integer
  overload: NetScape.Abstractions.Model.Position.CentralRegionY*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NetScape.Abstractions.Model.Position.GetDistance(NetScape.Abstractions.Model.Position)
  commentId: M:NetScape.Abstractions.Model.Position.GetDistance(NetScape.Abstractions.Model.Position)
  id: GetDistance(NetScape.Abstractions.Model.Position)
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: GetDistance(Position)
  nameWithType: Position.GetDistance(Position)
  fullName: NetScape.Abstractions.Model.Position.GetDistance(NetScape.Abstractions.Model.Position)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: GetDistance
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 95
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the distance between this position and another position. Only x and y are considered (i.e. 2 dimensions).\n"
  example: []
  syntax:
    content: public int GetDistance(Position other)
    parameters:
    - id: other
      type: NetScape.Abstractions.Model.Position
      description: 'The other position. '
    return:
      type: System.Int32
      description: 'The distance. '
    content.vb: Public Function GetDistance(other As Position) As Integer
  overload: NetScape.Abstractions.Model.Position.GetDistance*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Position.Height
  commentId: P:NetScape.Abstractions.Model.Position.Height
  id: Height
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: Height
  nameWithType: Position.Height
  fullName: NetScape.Abstractions.Model.Position.Height
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Height
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 106
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the height level.\n"
  example: []
  syntax:
    content: public int Height { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: 'The height level. '
    content.vb: Public Property Height As Integer
  overload: NetScape.Abstractions.Model.Position.Height*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Position.LocalX
  commentId: P:NetScape.Abstractions.Model.Position.LocalX
  id: LocalX
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: LocalX
  nameWithType: Position.LocalX
  fullName: NetScape.Abstractions.Model.Position.LocalX
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: LocalX
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 116
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the x coordinate inside the region of this position.\n"
  example: []
  syntax:
    content: >-
      [NotMapped]

      public int LocalX { get; }
    parameters: []
    return:
      type: System.Int32
      description: 'The local x coordinate. '
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property LocalX As Integer
  overload: NetScape.Abstractions.Model.Position.LocalX*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NetScape.Abstractions.Model.Position.getLocalX(NetScape.Abstractions.Model.Position)
  commentId: M:NetScape.Abstractions.Model.Position.getLocalX(NetScape.Abstractions.Model.Position)
  id: getLocalX(NetScape.Abstractions.Model.Position)
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: getLocalX(Position)
  nameWithType: Position.getLocalX(Position)
  fullName: NetScape.Abstractions.Model.Position.getLocalX(NetScape.Abstractions.Model.Position)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: getLocalX
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 130
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the local x coordinate inside the region of the {@code base} position.\n"
  example: []
  syntax:
    content: public int getLocalX(Position base)
    parameters:
    - id: base
      type: NetScape.Abstractions.Model.Position
      description: 'The base position. '
    return:
      type: System.Int32
      description: 'The local x coordinate. '
    content.vb: Public Function getLocalX(base As Position) As Integer
  overload: NetScape.Abstractions.Model.Position.getLocalX*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Position.LocalY
  commentId: P:NetScape.Abstractions.Model.Position.LocalY
  id: LocalY
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: LocalY
  nameWithType: Position.LocalY
  fullName: NetScape.Abstractions.Model.Position.LocalY
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: LocalY
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 139
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the y coordinate inside the region of this position.\n"
  example: []
  syntax:
    content: >-
      [NotMapped]

      public int LocalY { get; }
    parameters: []
    return:
      type: System.Int32
      description: 'The local y coordinate. '
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property LocalY As Integer
  overload: NetScape.Abstractions.Model.Position.LocalY*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NetScape.Abstractions.Model.Position.GetLocalY(NetScape.Abstractions.Model.Position)
  commentId: M:NetScape.Abstractions.Model.Position.GetLocalY(NetScape.Abstractions.Model.Position)
  id: GetLocalY(NetScape.Abstractions.Model.Position)
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: GetLocalY(Position)
  nameWithType: Position.GetLocalY(Position)
  fullName: NetScape.Abstractions.Model.Position.GetLocalY(NetScape.Abstractions.Model.Position)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: GetLocalY
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 153
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the local y coordinate inside the region of the {@code base} position.\n"
  example: []
  syntax:
    content: public int GetLocalY(Position base)
    parameters:
    - id: base
      type: NetScape.Abstractions.Model.Position
      description: 'The base position. '
    return:
      type: System.Int32
      description: 'The local y coordinate. '
    content.vb: Public Function GetLocalY(base As Position) As Integer
  overload: NetScape.Abstractions.Model.Position.GetLocalY*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Position.GetLongestDelta(NetScape.Abstractions.Model.Position)
  commentId: M:NetScape.Abstractions.Model.Position.GetLongestDelta(NetScape.Abstractions.Model.Position)
  id: GetLongestDelta(NetScape.Abstractions.Model.Position)
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: GetLongestDelta(Position)
  nameWithType: Position.GetLongestDelta(Position)
  fullName: NetScape.Abstractions.Model.Position.GetLongestDelta(NetScape.Abstractions.Model.Position)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: GetLongestDelta
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 163
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the longest horizontal or vertical delta between the two positions.\n"
  example: []
  syntax:
    content: public int GetLongestDelta(Position other)
    parameters:
    - id: other
      type: NetScape.Abstractions.Model.Position
      description: 'The other position. '
    return:
      type: System.Int32
      description: 'The longest horizontal or vertical delta. '
    content.vb: Public Function GetLongestDelta(other As Position) As Integer
  overload: NetScape.Abstractions.Model.Position.GetLongestDelta*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Position.RegionCoordinates
  commentId: P:NetScape.Abstractions.Model.Position.RegionCoordinates
  id: RegionCoordinates
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: RegionCoordinates
  nameWithType: Position.RegionCoordinates
  fullName: NetScape.Abstractions.Model.Position.RegionCoordinates
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: RegionCoordinates
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 174
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nReturns the <xref href=\"NetScape.Abstractions.Model.Position.RegionCoordinates\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"NetScape.Abstractions.Model.Area.Region\" data-throw-if-not-resolved=\"false\"></xref> this position is inside.\n"
  example: []
  syntax:
    content: >-
      [NotMapped]

      public RegionCoordinates RegionCoordinates { get; }
    parameters: []
    return:
      type: NetScape.Abstractions.Model.Area.RegionCoordinates
      description: 'The region coordinates. '
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property RegionCoordinates As RegionCoordinates
  overload: NetScape.Abstractions.Model.Position.RegionCoordinates*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NetScape.Abstractions.Model.Position.TopLeftRegionX
  commentId: P:NetScape.Abstractions.Model.Position.TopLeftRegionX
  id: TopLeftRegionX
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: TopLeftRegionX
  nameWithType: Position.TopLeftRegionX
  fullName: NetScape.Abstractions.Model.Position.TopLeftRegionX
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: TopLeftRegionX
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 187
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the x coordinate of the region this position is in.\n"
  example: []
  syntax:
    content: >-
      [NotMapped]

      public int TopLeftRegionX { get; }
    parameters: []
    return:
      type: System.Int32
      description: 'The region x coordinate. '
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property TopLeftRegionX As Integer
  overload: NetScape.Abstractions.Model.Position.TopLeftRegionX*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NetScape.Abstractions.Model.Position.TopLeftRegionY
  commentId: P:NetScape.Abstractions.Model.Position.TopLeftRegionY
  id: TopLeftRegionY
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: TopLeftRegionY
  nameWithType: Position.TopLeftRegionY
  fullName: NetScape.Abstractions.Model.Position.TopLeftRegionY
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: TopLeftRegionY
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 200
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the y coordinate of the region this position is in.\n"
  example: []
  syntax:
    content: >-
      [NotMapped]

      public int TopLeftRegionY { get; }
    parameters: []
    return:
      type: System.Int32
      description: 'The region y coordinate. '
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property TopLeftRegionY As Integer
  overload: NetScape.Abstractions.Model.Position.TopLeftRegionY*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NetScape.Abstractions.Model.Position.X
  commentId: P:NetScape.Abstractions.Model.Position.X
  id: X
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Position.X
  fullName: NetScape.Abstractions.Model.Position.X
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: X
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 213
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the x coordinate.\n"
  example: []
  syntax:
    content: public int X { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: 'The x coordinate. '
    content.vb: Public Property X As Integer
  overload: NetScape.Abstractions.Model.Position.X*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Position.Y
  commentId: P:NetScape.Abstractions.Model.Position.Y
  id: Y
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Position.Y
  fullName: NetScape.Abstractions.Model.Position.Y
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Y
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 223
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nGets the y coordinate.\n"
  example: []
  syntax:
    content: public int Y { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: 'The y coordinate. '
    content.vb: Public Property Y As Integer
  overload: NetScape.Abstractions.Model.Position.Y*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Position.GetHashCode
  commentId: M:NetScape.Abstractions.Model.Position.GetHashCode
  id: GetHashCode
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Position.GetHashCode()
  fullName: NetScape.Abstractions.Model.Position.GetHashCode()
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: GetHashCode
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 229
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: NetScape.Abstractions.Model.Position.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: NetScape.Abstractions.Model.Position.Inside(NetScape.Abstractions.Model.Area.Region)
  commentId: M:NetScape.Abstractions.Model.Position.Inside(NetScape.Abstractions.Model.Area.Region)
  id: Inside(NetScape.Abstractions.Model.Area.Region)
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: Inside(Region)
  nameWithType: Position.Inside(Region)
  fullName: NetScape.Abstractions.Model.Position.Inside(NetScape.Abstractions.Model.Area.Region)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Inside
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 239
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nReturns whether or not this position is inside the specified <xref href=\"NetScape.Abstractions.Model.Area.Region\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Inside(Region region)
    parameters:
    - id: region
      type: NetScape.Abstractions.Model.Area.Region
      description: 'The region. '
    return:
      type: System.Boolean
      description: '{@code true} if this position is inside the specified region, otherwise {@code false}. '
    content.vb: Public Function Inside(region As Region) As Boolean
  overload: NetScape.Abstractions.Model.Position.Inside*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Position.IsWithinDistance(NetScape.Abstractions.Model.Position,System.Int32)
  commentId: M:NetScape.Abstractions.Model.Position.IsWithinDistance(NetScape.Abstractions.Model.Position,System.Int32)
  id: IsWithinDistance(NetScape.Abstractions.Model.Position,System.Int32)
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: IsWithinDistance(Position, Int32)
  nameWithType: Position.IsWithinDistance(Position, Int32)
  fullName: NetScape.Abstractions.Model.Position.IsWithinDistance(NetScape.Abstractions.Model.Position, System.Int32)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: IsWithinDistance
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 252
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nChecks if the position is within distance of another.\n"
  example: []
  syntax:
    content: public bool IsWithinDistance(Position other, int distance)
    parameters:
    - id: other
      type: NetScape.Abstractions.Model.Position
      description: 'The other position. '
    - id: distance
      type: System.Int32
      description: 'The distance. '
    return:
      type: System.Boolean
      description: '{@code true} if so, {@code false} if not. '
    content.vb: Public Function IsWithinDistance(other As Position, distance As Integer) As Boolean
  overload: NetScape.Abstractions.Model.Position.IsWithinDistance*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Abstractions.Model.Position.Step(System.Int32,NetScape.Abstractions.Model.Direction)
  commentId: M:NetScape.Abstractions.Model.Position.Step(System.Int32,NetScape.Abstractions.Model.Direction)
  id: Step(System.Int32,NetScape.Abstractions.Model.Direction)
  parent: NetScape.Abstractions.Model.Position
  langs:
  - csharp
  - vb
  name: Step(Int32, Direction)
  nameWithType: Position.Step(Int32, Direction)
  fullName: NetScape.Abstractions.Model.Position.Step(System.Int32, NetScape.Abstractions.Model.Direction)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Model/Position.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Step
    path: src/NetScape.Abstractions/Model/Position.cs
    startLine: 265
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Model
  summary: "\nCreates a new position {@code num} steps from this position in the given direction.\n"
  example: []
  syntax:
    content: public Position Step(int num, Direction direction)
    parameters:
    - id: num
      type: System.Int32
      description: 'The number of steps to make. '
    - id: direction
      type: NetScape.Abstractions.Model.Direction
      description: 'The direction to make steps in. '
    return:
      type: NetScape.Abstractions.Model.Position
      description: 'A new {@code Position} that is {@code num} steps in {@code direction} ahead of this one. '
    content.vb: Public Function Step(num As Integer, direction As Direction) As Position
  overload: NetScape.Abstractions.Model.Position.Step*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NetScape.Abstractions.Model
  commentId: N:NetScape.Abstractions.Model
  name: NetScape.Abstractions.Model
  nameWithType: NetScape.Abstractions.Model
  fullName: NetScape.Abstractions.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NetScape.Abstractions.Model.Position.#ctor*
  commentId: Overload:NetScape.Abstractions.Model.Position.#ctor
  name: Position
  nameWithType: Position.Position
  fullName: NetScape.Abstractions.Model.Position.Position
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NetScape.Abstractions.Model.Position.Equals*
  commentId: Overload:NetScape.Abstractions.Model.Position.Equals
  name: Equals
  nameWithType: Position.Equals
  fullName: NetScape.Abstractions.Model.Position.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NetScape.Abstractions.Model.Position.CentralRegionX*
  commentId: Overload:NetScape.Abstractions.Model.Position.CentralRegionX
  name: CentralRegionX
  nameWithType: Position.CentralRegionX
  fullName: NetScape.Abstractions.Model.Position.CentralRegionX
- uid: NetScape.Abstractions.Model.Position.CentralRegionY*
  commentId: Overload:NetScape.Abstractions.Model.Position.CentralRegionY
  name: CentralRegionY
  nameWithType: Position.CentralRegionY
  fullName: NetScape.Abstractions.Model.Position.CentralRegionY
- uid: NetScape.Abstractions.Model.Position.GetDistance*
  commentId: Overload:NetScape.Abstractions.Model.Position.GetDistance
  name: GetDistance
  nameWithType: Position.GetDistance
  fullName: NetScape.Abstractions.Model.Position.GetDistance
- uid: NetScape.Abstractions.Model.Position
  commentId: T:NetScape.Abstractions.Model.Position
  parent: NetScape.Abstractions.Model
  name: Position
  nameWithType: Position
  fullName: NetScape.Abstractions.Model.Position
- uid: NetScape.Abstractions.Model.Position.Height*
  commentId: Overload:NetScape.Abstractions.Model.Position.Height
  name: Height
  nameWithType: Position.Height
  fullName: NetScape.Abstractions.Model.Position.Height
- uid: NetScape.Abstractions.Model.Position.LocalX*
  commentId: Overload:NetScape.Abstractions.Model.Position.LocalX
  name: LocalX
  nameWithType: Position.LocalX
  fullName: NetScape.Abstractions.Model.Position.LocalX
- uid: NetScape.Abstractions.Model.Position.getLocalX*
  commentId: Overload:NetScape.Abstractions.Model.Position.getLocalX
  name: getLocalX
  nameWithType: Position.getLocalX
  fullName: NetScape.Abstractions.Model.Position.getLocalX
- uid: NetScape.Abstractions.Model.Position.LocalY*
  commentId: Overload:NetScape.Abstractions.Model.Position.LocalY
  name: LocalY
  nameWithType: Position.LocalY
  fullName: NetScape.Abstractions.Model.Position.LocalY
- uid: NetScape.Abstractions.Model.Position.GetLocalY*
  commentId: Overload:NetScape.Abstractions.Model.Position.GetLocalY
  name: GetLocalY
  nameWithType: Position.GetLocalY
  fullName: NetScape.Abstractions.Model.Position.GetLocalY
- uid: NetScape.Abstractions.Model.Position.GetLongestDelta*
  commentId: Overload:NetScape.Abstractions.Model.Position.GetLongestDelta
  name: GetLongestDelta
  nameWithType: Position.GetLongestDelta
  fullName: NetScape.Abstractions.Model.Position.GetLongestDelta
- uid: NetScape.Abstractions.Model.Position.RegionCoordinates
  commentId: P:NetScape.Abstractions.Model.Position.RegionCoordinates
  isExternal: true
- uid: NetScape.Abstractions.Model.Area.Region
  commentId: T:NetScape.Abstractions.Model.Area.Region
  parent: NetScape.Abstractions.Model.Area
  name: Region
  nameWithType: Region
  fullName: NetScape.Abstractions.Model.Area.Region
- uid: NetScape.Abstractions.Model.Position.RegionCoordinates*
  commentId: Overload:NetScape.Abstractions.Model.Position.RegionCoordinates
  name: RegionCoordinates
  nameWithType: Position.RegionCoordinates
  fullName: NetScape.Abstractions.Model.Position.RegionCoordinates
- uid: NetScape.Abstractions.Model.Area.RegionCoordinates
  commentId: T:NetScape.Abstractions.Model.Area.RegionCoordinates
  parent: NetScape.Abstractions.Model.Area
  name: RegionCoordinates
  nameWithType: RegionCoordinates
  fullName: NetScape.Abstractions.Model.Area.RegionCoordinates
- uid: NetScape.Abstractions.Model.Area
  commentId: N:NetScape.Abstractions.Model.Area
  name: NetScape.Abstractions.Model.Area
  nameWithType: NetScape.Abstractions.Model.Area
  fullName: NetScape.Abstractions.Model.Area
- uid: NetScape.Abstractions.Model.Position.TopLeftRegionX*
  commentId: Overload:NetScape.Abstractions.Model.Position.TopLeftRegionX
  name: TopLeftRegionX
  nameWithType: Position.TopLeftRegionX
  fullName: NetScape.Abstractions.Model.Position.TopLeftRegionX
- uid: NetScape.Abstractions.Model.Position.TopLeftRegionY*
  commentId: Overload:NetScape.Abstractions.Model.Position.TopLeftRegionY
  name: TopLeftRegionY
  nameWithType: Position.TopLeftRegionY
  fullName: NetScape.Abstractions.Model.Position.TopLeftRegionY
- uid: NetScape.Abstractions.Model.Position.X*
  commentId: Overload:NetScape.Abstractions.Model.Position.X
  name: X
  nameWithType: Position.X
  fullName: NetScape.Abstractions.Model.Position.X
- uid: NetScape.Abstractions.Model.Position.Y*
  commentId: Overload:NetScape.Abstractions.Model.Position.Y
  name: Y
  nameWithType: Position.Y
  fullName: NetScape.Abstractions.Model.Position.Y
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NetScape.Abstractions.Model.Position.GetHashCode*
  commentId: Overload:NetScape.Abstractions.Model.Position.GetHashCode
  name: GetHashCode
  nameWithType: Position.GetHashCode
  fullName: NetScape.Abstractions.Model.Position.GetHashCode
- uid: NetScape.Abstractions.Model.Position.Inside*
  commentId: Overload:NetScape.Abstractions.Model.Position.Inside
  name: Inside
  nameWithType: Position.Inside
  fullName: NetScape.Abstractions.Model.Position.Inside
- uid: NetScape.Abstractions.Model.Position.IsWithinDistance*
  commentId: Overload:NetScape.Abstractions.Model.Position.IsWithinDistance
  name: IsWithinDistance
  nameWithType: Position.IsWithinDistance
  fullName: NetScape.Abstractions.Model.Position.IsWithinDistance
- uid: NetScape.Abstractions.Model.Position.Step*
  commentId: Overload:NetScape.Abstractions.Model.Position.Step
  name: Step
  nameWithType: Position.Step
  fullName: NetScape.Abstractions.Model.Position.Step
- uid: NetScape.Abstractions.Model.Direction
  commentId: T:NetScape.Abstractions.Model.Direction
  parent: NetScape.Abstractions.Model
  name: Direction
  nameWithType: Direction
  fullName: NetScape.Abstractions.Model.Direction
