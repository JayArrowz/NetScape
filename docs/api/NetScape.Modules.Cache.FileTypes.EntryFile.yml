### YamlMime:ManagedReference
items:
- uid: NetScape.Modules.Cache.FileTypes.EntryFile
  commentId: T:NetScape.Modules.Cache.FileTypes.EntryFile
  id: EntryFile
  parent: NetScape.Modules.Cache.FileTypes
  children:
  - NetScape.Modules.Cache.FileTypes.EntryFile.AddEntry(System.Int32,NetScape.Abstractions.Cache.CacheFileBase)
  - NetScape.Modules.Cache.FileTypes.EntryFile.AddEntry(System.Int32,System.Byte[])
  - NetScape.Modules.Cache.FileTypes.EntryFile.Decode(System.Byte[])
  - NetScape.Modules.Cache.FileTypes.EntryFile.Empty
  - NetScape.Modules.Cache.FileTypes.EntryFile.Encode
  - NetScape.Modules.Cache.FileTypes.EntryFile.EntryCount
  - NetScape.Modules.Cache.FileTypes.EntryFile.GetEntries``1
  - NetScape.Modules.Cache.FileTypes.EntryFile.GetEntry``1(System.Int32)
  - NetScape.Modules.Cache.FileTypes.EntryFile.HasEntry(System.Int32)
  langs:
  - csharp
  - vb
  name: EntryFile
  nameWithType: EntryFile
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile
  type: Class
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: EntryFile
    path: src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
    startLine: 12
  assemblies:
  - NetScape.Modules.Cache
  namespace: NetScape.Modules.Cache.FileTypes
  summary: "\nA cache file that contains multiple files.\n"
  example: []
  syntax:
    content: 'public class EntryFile : CacheFileBase'
    content.vb: >-
      Public Class EntryFile
          Inherits CacheFileBase
  inheritance:
  - System.Object
  - NetScape.Abstractions.Cache.CacheFileBase
  inheritedMembers:
  - NetScape.Abstractions.Cache.CacheFileBase.Info
  - NetScape.Abstractions.Cache.CacheFileBase.FromBinaryFile(NetScape.Abstractions.Cache.BinaryFile)
  - NetScape.Abstractions.Cache.CacheFileBase.ToBinaryFile
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.EntryCount
  commentId: P:NetScape.Modules.Cache.FileTypes.EntryFile.EntryCount
  id: EntryCount
  parent: NetScape.Modules.Cache.FileTypes.EntryFile
  langs:
  - csharp
  - vb
  name: EntryCount
  nameWithType: EntryFile.EntryCount
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.EntryCount
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: EntryCount
    path: src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
    startLine: 16
  assemblies:
  - NetScape.Modules.Cache
  namespace: NetScape.Modules.Cache.FileTypes
  syntax:
    content: public int EntryCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property EntryCount As Integer
  overload: NetScape.Modules.Cache.FileTypes.EntryFile.EntryCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.Empty
  commentId: P:NetScape.Modules.Cache.FileTypes.EntryFile.Empty
  id: Empty
  parent: NetScape.Modules.Cache.FileTypes.EntryFile
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: EntryFile.Empty
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.Empty
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Empty
    path: src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
    startLine: 18
  assemblies:
  - NetScape.Modules.Cache
  namespace: NetScape.Modules.Cache.FileTypes
  syntax:
    content: public bool Empty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Empty As Boolean
  overload: NetScape.Modules.Cache.FileTypes.EntryFile.Empty*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.HasEntry(System.Int32)
  commentId: M:NetScape.Modules.Cache.FileTypes.EntryFile.HasEntry(System.Int32)
  id: HasEntry(System.Int32)
  parent: NetScape.Modules.Cache.FileTypes.EntryFile
  langs:
  - csharp
  - vb
  name: HasEntry(Int32)
  nameWithType: EntryFile.HasEntry(Int32)
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.HasEntry(System.Int32)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: HasEntry
    path: src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
    startLine: 20
  assemblies:
  - NetScape.Modules.Cache
  namespace: NetScape.Modules.Cache.FileTypes
  syntax:
    content: public bool HasEntry(int entryId)
    parameters:
    - id: entryId
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Function HasEntry(entryId As Integer) As Boolean
  overload: NetScape.Modules.Cache.FileTypes.EntryFile.HasEntry*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.GetEntry``1(System.Int32)
  commentId: M:NetScape.Modules.Cache.FileTypes.EntryFile.GetEntry``1(System.Int32)
  id: GetEntry``1(System.Int32)
  parent: NetScape.Modules.Cache.FileTypes.EntryFile
  langs:
  - csharp
  - vb
  name: GetEntry<T>(Int32)
  nameWithType: EntryFile.GetEntry<T>(Int32)
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.GetEntry<T>(System.Int32)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: GetEntry
    path: src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
    startLine: 22
  assemblies:
  - NetScape.Modules.Cache
  namespace: NetScape.Modules.Cache.FileTypes
  syntax:
    content: >-
      public T GetEntry<T>(int entryId)
          where T : CacheFileBase
    parameters:
    - id: entryId
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function GetEntry(Of T As CacheFileBase)(entryId As Integer) As T
  overload: NetScape.Modules.Cache.FileTypes.EntryFile.GetEntry*
  nameWithType.vb: EntryFile.GetEntry(Of T)(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NetScape.Modules.Cache.FileTypes.EntryFile.GetEntry(Of T)(System.Int32)
  name.vb: GetEntry(Of T)(Int32)
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.GetEntries``1
  commentId: M:NetScape.Modules.Cache.FileTypes.EntryFile.GetEntries``1
  id: GetEntries``1
  parent: NetScape.Modules.Cache.FileTypes.EntryFile
  langs:
  - csharp
  - vb
  name: GetEntries<T>()
  nameWithType: EntryFile.GetEntries<T>()
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.GetEntries<T>()
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: GetEntries
    path: src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
    startLine: 37
  assemblies:
  - NetScape.Modules.Cache
  namespace: NetScape.Modules.Cache.FileTypes
  syntax:
    content: >-
      public IEnumerable<T> GetEntries<T>()
          where T : CacheFileBase
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
    content.vb: Public Function GetEntries(Of T As CacheFileBase) As IEnumerable(Of T)
  overload: NetScape.Modules.Cache.FileTypes.EntryFile.GetEntries*
  nameWithType.vb: EntryFile.GetEntries(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NetScape.Modules.Cache.FileTypes.EntryFile.GetEntries(Of T)()
  name.vb: GetEntries(Of T)()
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.AddEntry(System.Int32,NetScape.Abstractions.Cache.CacheFileBase)
  commentId: M:NetScape.Modules.Cache.FileTypes.EntryFile.AddEntry(System.Int32,NetScape.Abstractions.Cache.CacheFileBase)
  id: AddEntry(System.Int32,NetScape.Abstractions.Cache.CacheFileBase)
  parent: NetScape.Modules.Cache.FileTypes.EntryFile
  langs:
  - csharp
  - vb
  name: AddEntry(Int32, CacheFileBase)
  nameWithType: EntryFile.AddEntry(Int32, CacheFileBase)
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.AddEntry(System.Int32, NetScape.Abstractions.Cache.CacheFileBase)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: AddEntry
    path: src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
    startLine: 47
  assemblies:
  - NetScape.Modules.Cache
  namespace: NetScape.Modules.Cache.FileTypes
  summary: "\n"
  example: []
  syntax:
    content: public void AddEntry(int entryId, CacheFileBase entry)
    parameters:
    - id: entryId
      type: System.Int32
      description: ''
    - id: entry
      type: NetScape.Abstractions.Cache.CacheFileBase
      description: ''
    content.vb: Public Sub AddEntry(entryId As Integer, entry As CacheFileBase)
  overload: NetScape.Modules.Cache.FileTypes.EntryFile.AddEntry*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.AddEntry(System.Int32,System.Byte[])
  commentId: M:NetScape.Modules.Cache.FileTypes.EntryFile.AddEntry(System.Int32,System.Byte[])
  id: AddEntry(System.Int32,System.Byte[])
  parent: NetScape.Modules.Cache.FileTypes.EntryFile
  langs:
  - csharp
  - vb
  name: AddEntry(Int32, Byte[])
  nameWithType: EntryFile.AddEntry(Int32, Byte[])
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.AddEntry(System.Int32, System.Byte[])
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: AddEntry
    path: src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
    startLine: 63
  assemblies:
  - NetScape.Modules.Cache
  namespace: NetScape.Modules.Cache.FileTypes
  syntax:
    content: public void AddEntry(int entryId, byte[] entryData)
    parameters:
    - id: entryId
      type: System.Int32
    - id: entryData
      type: System.Byte[]
    content.vb: Public Sub AddEntry(entryId As Integer, entryData As Byte())
  overload: NetScape.Modules.Cache.FileTypes.EntryFile.AddEntry*
  nameWithType.vb: EntryFile.AddEntry(Int32, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NetScape.Modules.Cache.FileTypes.EntryFile.AddEntry(System.Int32, System.Byte())
  name.vb: AddEntry(Int32, Byte())
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.Decode(System.Byte[])
  commentId: M:NetScape.Modules.Cache.FileTypes.EntryFile.Decode(System.Byte[])
  id: Decode(System.Byte[])
  parent: NetScape.Modules.Cache.FileTypes.EntryFile
  langs:
  - csharp
  - vb
  name: Decode(Byte[])
  nameWithType: EntryFile.Decode(Byte[])
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.Decode(System.Byte[])
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Decode
    path: src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
    startLine: 71
  assemblies:
  - NetScape.Modules.Cache
  namespace: NetScape.Modules.Cache.FileTypes
  syntax:
    content: public override void Decode(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    content.vb: Public Overrides Sub Decode(data As Byte())
  overridden: NetScape.Abstractions.Cache.CacheFileBase.Decode(System.Byte[])
  overload: NetScape.Modules.Cache.FileTypes.EntryFile.Decode*
  nameWithType.vb: EntryFile.Decode(Byte())
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: NetScape.Modules.Cache.FileTypes.EntryFile.Decode(System.Byte())
  name.vb: Decode(Byte())
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.Encode
  commentId: M:NetScape.Modules.Cache.FileTypes.EntryFile.Encode
  id: Encode
  parent: NetScape.Modules.Cache.FileTypes.EntryFile
  langs:
  - csharp
  - vb
  name: Encode()
  nameWithType: EntryFile.Encode()
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.Encode()
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: Encode
    path: src/NetScape.Modules.Cache/FileTypes/EntryFile.cs
    startLine: 149
  assemblies:
  - NetScape.Modules.Cache
  namespace: NetScape.Modules.Cache.FileTypes
  syntax:
    content: public override byte[] Encode()
    return:
      type: System.Byte[]
    content.vb: Public Overrides Function Encode As Byte()
  overridden: NetScape.Abstractions.Cache.CacheFileBase.Encode
  overload: NetScape.Modules.Cache.FileTypes.EntryFile.Encode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: NetScape.Modules.Cache.FileTypes
  commentId: N:NetScape.Modules.Cache.FileTypes
  name: NetScape.Modules.Cache.FileTypes
  nameWithType: NetScape.Modules.Cache.FileTypes
  fullName: NetScape.Modules.Cache.FileTypes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: NetScape.Abstractions.Cache.CacheFileBase
  commentId: T:NetScape.Abstractions.Cache.CacheFileBase
  parent: NetScape.Abstractions.Cache
  name: CacheFileBase
  nameWithType: CacheFileBase
  fullName: NetScape.Abstractions.Cache.CacheFileBase
- uid: NetScape.Abstractions.Cache.CacheFileBase.Info
  commentId: P:NetScape.Abstractions.Cache.CacheFileBase.Info
  parent: NetScape.Abstractions.Cache.CacheFileBase
  name: Info
  nameWithType: CacheFileBase.Info
  fullName: NetScape.Abstractions.Cache.CacheFileBase.Info
- uid: NetScape.Abstractions.Cache.CacheFileBase.FromBinaryFile(NetScape.Abstractions.Cache.BinaryFile)
  commentId: M:NetScape.Abstractions.Cache.CacheFileBase.FromBinaryFile(NetScape.Abstractions.Cache.BinaryFile)
  parent: NetScape.Abstractions.Cache.CacheFileBase
  name: FromBinaryFile(BinaryFile)
  nameWithType: CacheFileBase.FromBinaryFile(BinaryFile)
  fullName: NetScape.Abstractions.Cache.CacheFileBase.FromBinaryFile(NetScape.Abstractions.Cache.BinaryFile)
  spec.csharp:
  - uid: NetScape.Abstractions.Cache.CacheFileBase.FromBinaryFile(NetScape.Abstractions.Cache.BinaryFile)
    name: FromBinaryFile
    nameWithType: CacheFileBase.FromBinaryFile
    fullName: NetScape.Abstractions.Cache.CacheFileBase.FromBinaryFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: NetScape.Abstractions.Cache.BinaryFile
    name: BinaryFile
    nameWithType: BinaryFile
    fullName: NetScape.Abstractions.Cache.BinaryFile
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NetScape.Abstractions.Cache.CacheFileBase.FromBinaryFile(NetScape.Abstractions.Cache.BinaryFile)
    name: FromBinaryFile
    nameWithType: CacheFileBase.FromBinaryFile
    fullName: NetScape.Abstractions.Cache.CacheFileBase.FromBinaryFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: NetScape.Abstractions.Cache.BinaryFile
    name: BinaryFile
    nameWithType: BinaryFile
    fullName: NetScape.Abstractions.Cache.BinaryFile
  - name: )
    nameWithType: )
    fullName: )
- uid: NetScape.Abstractions.Cache.CacheFileBase.ToBinaryFile
  commentId: M:NetScape.Abstractions.Cache.CacheFileBase.ToBinaryFile
  parent: NetScape.Abstractions.Cache.CacheFileBase
  name: ToBinaryFile()
  nameWithType: CacheFileBase.ToBinaryFile()
  fullName: NetScape.Abstractions.Cache.CacheFileBase.ToBinaryFile()
  spec.csharp:
  - uid: NetScape.Abstractions.Cache.CacheFileBase.ToBinaryFile
    name: ToBinaryFile
    nameWithType: CacheFileBase.ToBinaryFile
    fullName: NetScape.Abstractions.Cache.CacheFileBase.ToBinaryFile
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NetScape.Abstractions.Cache.CacheFileBase.ToBinaryFile
    name: ToBinaryFile
    nameWithType: CacheFileBase.ToBinaryFile
    fullName: NetScape.Abstractions.Cache.CacheFileBase.ToBinaryFile
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NetScape.Abstractions.Cache
  commentId: N:NetScape.Abstractions.Cache
  name: NetScape.Abstractions.Cache
  nameWithType: NetScape.Abstractions.Cache
  fullName: NetScape.Abstractions.Cache
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.EntryCount*
  commentId: Overload:NetScape.Modules.Cache.FileTypes.EntryFile.EntryCount
  name: EntryCount
  nameWithType: EntryFile.EntryCount
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.EntryCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.Empty*
  commentId: Overload:NetScape.Modules.Cache.FileTypes.EntryFile.Empty
  name: Empty
  nameWithType: EntryFile.Empty
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.Empty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.HasEntry*
  commentId: Overload:NetScape.Modules.Cache.FileTypes.EntryFile.HasEntry
  name: HasEntry
  nameWithType: EntryFile.HasEntry
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.HasEntry
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.GetEntry*
  commentId: Overload:NetScape.Modules.Cache.FileTypes.EntryFile.GetEntry
  name: GetEntry
  nameWithType: EntryFile.GetEntry
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.GetEntry
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.GetEntries*
  commentId: Overload:NetScape.Modules.Cache.FileTypes.EntryFile.GetEntries
  name: GetEntries
  nameWithType: EntryFile.GetEntries
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.GetEntries
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.NotImplementedException
  commentId: T:System.NotImplementedException
  isExternal: true
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.AddEntry*
  commentId: Overload:NetScape.Modules.Cache.FileTypes.EntryFile.AddEntry
  name: AddEntry
  nameWithType: EntryFile.AddEntry
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.AddEntry
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: NetScape.Abstractions.Cache.CacheFileBase.Decode(System.Byte[])
  commentId: M:NetScape.Abstractions.Cache.CacheFileBase.Decode(System.Byte[])
  parent: NetScape.Abstractions.Cache.CacheFileBase
  isExternal: true
  name: Decode(Byte[])
  nameWithType: CacheFileBase.Decode(Byte[])
  fullName: NetScape.Abstractions.Cache.CacheFileBase.Decode(System.Byte[])
  nameWithType.vb: CacheFileBase.Decode(Byte())
  fullName.vb: NetScape.Abstractions.Cache.CacheFileBase.Decode(System.Byte())
  name.vb: Decode(Byte())
  spec.csharp:
  - uid: NetScape.Abstractions.Cache.CacheFileBase.Decode(System.Byte[])
    name: Decode
    nameWithType: CacheFileBase.Decode
    fullName: NetScape.Abstractions.Cache.CacheFileBase.Decode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NetScape.Abstractions.Cache.CacheFileBase.Decode(System.Byte[])
    name: Decode
    nameWithType: CacheFileBase.Decode
    fullName: NetScape.Abstractions.Cache.CacheFileBase.Decode
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.Decode*
  commentId: Overload:NetScape.Modules.Cache.FileTypes.EntryFile.Decode
  name: Decode
  nameWithType: EntryFile.Decode
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.Decode
- uid: NetScape.Abstractions.Cache.CacheFileBase.Encode
  commentId: M:NetScape.Abstractions.Cache.CacheFileBase.Encode
  parent: NetScape.Abstractions.Cache.CacheFileBase
  name: Encode()
  nameWithType: CacheFileBase.Encode()
  fullName: NetScape.Abstractions.Cache.CacheFileBase.Encode()
  spec.csharp:
  - uid: NetScape.Abstractions.Cache.CacheFileBase.Encode
    name: Encode
    nameWithType: CacheFileBase.Encode
    fullName: NetScape.Abstractions.Cache.CacheFileBase.Encode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NetScape.Abstractions.Cache.CacheFileBase.Encode
    name: Encode
    nameWithType: CacheFileBase.Encode
    fullName: NetScape.Abstractions.Cache.CacheFileBase.Encode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NetScape.Modules.Cache.FileTypes.EntryFile.Encode*
  commentId: Overload:NetScape.Modules.Cache.FileTypes.EntryFile.Encode
  name: Encode
  nameWithType: EntryFile.Encode
  fullName: NetScape.Modules.Cache.FileTypes.EntryFile.Encode
