### YamlMime:ManagedReference
items:
- uid: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer
  commentId: T:NetScape.Modules.DAL.EntityFrameworkPlayerSerializer
  id: EntityFrameworkPlayerSerializer
  parent: NetScape.Modules.DAL
  children:
  - NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.#ctor(Microsoft.EntityFrameworkCore.IDbContextFactory{NetScape.Modules.DAL.DatabaseContext})
  - NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.AddOrUpdateAsync(NetScape.Abstractions.Model.Game.Player)
  - NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetAsync(System.String)
  - NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetOrCreateAsync(PlayerCredentials)
  langs:
  - csharp
  - vb
  name: EntityFrameworkPlayerSerializer
  nameWithType: EntityFrameworkPlayerSerializer
  fullName: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer
  type: Class
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.DAL/EntityFrameworkPlayerSerializer.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: EntityFrameworkPlayerSerializer
    path: src/NetScape.Modules.DAL/EntityFrameworkPlayerSerializer.cs
    startLine: 14
  assemblies:
  - NetScape.Modules.DAL
  namespace: NetScape.Modules.DAL
  summary: "\nSerializes/Deserializes players using entity framework\n"
  example: []
  syntax:
    content: 'public class EntityFrameworkPlayerSerializer : IPlayerSerializer'
    content.vb: >-
      Public Class EntityFrameworkPlayerSerializer
          Implements IPlayerSerializer
  seealso:
  - linkId: NetScape.Abstractions.FileSystem.IPlayerSerializer
    commentId: T:NetScape.Abstractions.FileSystem.IPlayerSerializer
  inheritance:
  - System.Object
  implements:
  - NetScape.Abstractions.FileSystem.IPlayerSerializer
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.#ctor(Microsoft.EntityFrameworkCore.IDbContextFactory{NetScape.Modules.DAL.DatabaseContext})
  commentId: M:NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.#ctor(Microsoft.EntityFrameworkCore.IDbContextFactory{NetScape.Modules.DAL.DatabaseContext})
  id: '#ctor(Microsoft.EntityFrameworkCore.IDbContextFactory{NetScape.Modules.DAL.DatabaseContext})'
  parent: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer
  langs:
  - csharp
  - vb
  name: EntityFrameworkPlayerSerializer(IDbContextFactory<DatabaseContext>)
  nameWithType: EntityFrameworkPlayerSerializer.EntityFrameworkPlayerSerializer(IDbContextFactory<DatabaseContext>)
  fullName: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.EntityFrameworkPlayerSerializer(Microsoft.EntityFrameworkCore.IDbContextFactory<NetScape.Modules.DAL.DatabaseContext>)
  type: Constructor
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.DAL/EntityFrameworkPlayerSerializer.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: .ctor
    path: src/NetScape.Modules.DAL/EntityFrameworkPlayerSerializer.cs
    startLine: 18
  assemblies:
  - NetScape.Modules.DAL
  namespace: NetScape.Modules.DAL
  syntax:
    content: public EntityFrameworkPlayerSerializer(IDbContextFactory<DatabaseContext> dbContextFactory)
    parameters:
    - id: dbContextFactory
      type: Microsoft.EntityFrameworkCore.IDbContextFactory{NetScape.Modules.DAL.DatabaseContext}
    content.vb: Public Sub New(dbContextFactory As IDbContextFactory(Of DatabaseContext))
  overload: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.#ctor*
  nameWithType.vb: EntityFrameworkPlayerSerializer.EntityFrameworkPlayerSerializer(IDbContextFactory(Of DatabaseContext))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.EntityFrameworkPlayerSerializer(Microsoft.EntityFrameworkCore.IDbContextFactory(Of NetScape.Modules.DAL.DatabaseContext))
  name.vb: EntityFrameworkPlayerSerializer(IDbContextFactory(Of DatabaseContext))
- uid: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetAsync(System.String)
  commentId: M:NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetAsync(System.String)
  id: GetAsync(System.String)
  parent: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer
  langs:
  - csharp
  - vb
  name: GetAsync(String)
  nameWithType: EntityFrameworkPlayerSerializer.GetAsync(String)
  fullName: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetAsync(System.String)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.DAL/EntityFrameworkPlayerSerializer.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: GetAsync
    path: src/NetScape.Modules.DAL/EntityFrameworkPlayerSerializer.cs
    startLine: 23
  assemblies:
  - NetScape.Modules.DAL
  namespace: NetScape.Modules.DAL
  syntax:
    content: public Task<Player> GetAsync(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Threading.Tasks.Task{NetScape.Abstractions.Model.Game.Player}
    content.vb: Public Function GetAsync(name As String) As Task(Of Player)
  overload: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetAsync*
  implements:
  - NetScape.Abstractions.FileSystem.IPlayerSerializer.GetAsync(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.AddOrUpdateAsync(NetScape.Abstractions.Model.Game.Player)
  commentId: M:NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.AddOrUpdateAsync(NetScape.Abstractions.Model.Game.Player)
  id: AddOrUpdateAsync(NetScape.Abstractions.Model.Game.Player)
  parent: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer
  langs:
  - csharp
  - vb
  name: AddOrUpdateAsync(Player)
  nameWithType: EntityFrameworkPlayerSerializer.AddOrUpdateAsync(Player)
  fullName: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.AddOrUpdateAsync(NetScape.Abstractions.Model.Game.Player)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.DAL/EntityFrameworkPlayerSerializer.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: AddOrUpdateAsync
    path: src/NetScape.Modules.DAL/EntityFrameworkPlayerSerializer.cs
    startLine: 32
  assemblies:
  - NetScape.Modules.DAL
  namespace: NetScape.Modules.DAL
  syntax:
    content: public Task<int> AddOrUpdateAsync(Player player)
    parameters:
    - id: player
      type: NetScape.Abstractions.Model.Game.Player
    return:
      type: System.Threading.Tasks.Task{System.Int32}
    content.vb: Public Function AddOrUpdateAsync(player As Player) As Task(Of Integer)
  overload: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.AddOrUpdateAsync*
  implements:
  - NetScape.Abstractions.FileSystem.IPlayerSerializer.AddOrUpdateAsync(NetScape.Abstractions.Model.Game.Player)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetOrCreateAsync(PlayerCredentials)
  commentId: M:NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetOrCreateAsync(PlayerCredentials)
  id: GetOrCreateAsync(PlayerCredentials)
  parent: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer
  langs:
  - csharp
  - vb
  name: GetOrCreateAsync(PlayerCredentials)
  nameWithType: EntityFrameworkPlayerSerializer.GetOrCreateAsync(PlayerCredentials)
  fullName: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetOrCreateAsync(PlayerCredentials)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Modules.DAL/EntityFrameworkPlayerSerializer.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: GetOrCreateAsync
    path: src/NetScape.Modules.DAL/EntityFrameworkPlayerSerializer.cs
    startLine: 58
  assemblies:
  - NetScape.Modules.DAL
  namespace: NetScape.Modules.DAL
  syntax:
    content: public Task<Player> GetOrCreateAsync(PlayerCredentials playerCredentials)
    parameters:
    - id: playerCredentials
      type: PlayerCredentials
    return:
      type: System.Threading.Tasks.Task{NetScape.Abstractions.Model.Game.Player}
    content.vb: Public Function GetOrCreateAsync(playerCredentials As PlayerCredentials) As Task(Of Player)
  overload: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetOrCreateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: NetScape.Abstractions.FileSystem.IPlayerSerializer
  commentId: T:NetScape.Abstractions.FileSystem.IPlayerSerializer
  parent: NetScape.Abstractions.FileSystem
  name: IPlayerSerializer
  nameWithType: IPlayerSerializer
  fullName: NetScape.Abstractions.FileSystem.IPlayerSerializer
- uid: NetScape.Modules.DAL
  commentId: N:NetScape.Modules.DAL
  name: NetScape.Modules.DAL
  nameWithType: NetScape.Modules.DAL
  fullName: NetScape.Modules.DAL
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: NetScape.Abstractions.FileSystem
  commentId: N:NetScape.Abstractions.FileSystem
  name: NetScape.Abstractions.FileSystem
  nameWithType: NetScape.Abstractions.FileSystem
  fullName: NetScape.Abstractions.FileSystem
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.#ctor*
  commentId: Overload:NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.#ctor
  name: EntityFrameworkPlayerSerializer
  nameWithType: EntityFrameworkPlayerSerializer.EntityFrameworkPlayerSerializer
  fullName: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.EntityFrameworkPlayerSerializer
- uid: Microsoft.EntityFrameworkCore.IDbContextFactory{NetScape.Modules.DAL.DatabaseContext}
  commentId: T:Microsoft.EntityFrameworkCore.IDbContextFactory{NetScape.Modules.DAL.DatabaseContext}
  parent: Microsoft.EntityFrameworkCore
  definition: Microsoft.EntityFrameworkCore.IDbContextFactory`1
  name: IDbContextFactory<DatabaseContext>
  nameWithType: IDbContextFactory<DatabaseContext>
  fullName: Microsoft.EntityFrameworkCore.IDbContextFactory<NetScape.Modules.DAL.DatabaseContext>
  nameWithType.vb: IDbContextFactory(Of DatabaseContext)
  fullName.vb: Microsoft.EntityFrameworkCore.IDbContextFactory(Of NetScape.Modules.DAL.DatabaseContext)
  name.vb: IDbContextFactory(Of DatabaseContext)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.IDbContextFactory`1
    name: IDbContextFactory
    nameWithType: IDbContextFactory
    fullName: Microsoft.EntityFrameworkCore.IDbContextFactory
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NetScape.Modules.DAL.DatabaseContext
    name: DatabaseContext
    nameWithType: DatabaseContext
    fullName: NetScape.Modules.DAL.DatabaseContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.IDbContextFactory`1
    name: IDbContextFactory
    nameWithType: IDbContextFactory
    fullName: Microsoft.EntityFrameworkCore.IDbContextFactory
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NetScape.Modules.DAL.DatabaseContext
    name: DatabaseContext
    nameWithType: DatabaseContext
    fullName: NetScape.Modules.DAL.DatabaseContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.IDbContextFactory`1
  commentId: T:Microsoft.EntityFrameworkCore.IDbContextFactory`1
  isExternal: true
  name: IDbContextFactory<TContext>
  nameWithType: IDbContextFactory<TContext>
  fullName: Microsoft.EntityFrameworkCore.IDbContextFactory<TContext>
  nameWithType.vb: IDbContextFactory(Of TContext)
  fullName.vb: Microsoft.EntityFrameworkCore.IDbContextFactory(Of TContext)
  name.vb: IDbContextFactory(Of TContext)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.IDbContextFactory`1
    name: IDbContextFactory
    nameWithType: IDbContextFactory
    fullName: Microsoft.EntityFrameworkCore.IDbContextFactory
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.IDbContextFactory`1
    name: IDbContextFactory
    nameWithType: IDbContextFactory
    fullName: Microsoft.EntityFrameworkCore.IDbContextFactory
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TContext
    nameWithType: TContext
    fullName: TContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: true
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetAsync*
  commentId: Overload:NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetAsync
  name: GetAsync
  nameWithType: EntityFrameworkPlayerSerializer.GetAsync
  fullName: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetAsync
- uid: NetScape.Abstractions.FileSystem.IPlayerSerializer.GetAsync(System.String)
  commentId: M:NetScape.Abstractions.FileSystem.IPlayerSerializer.GetAsync(System.String)
  parent: NetScape.Abstractions.FileSystem.IPlayerSerializer
  isExternal: true
  name: GetAsync(String)
  nameWithType: IPlayerSerializer.GetAsync(String)
  fullName: NetScape.Abstractions.FileSystem.IPlayerSerializer.GetAsync(System.String)
  spec.csharp:
  - uid: NetScape.Abstractions.FileSystem.IPlayerSerializer.GetAsync(System.String)
    name: GetAsync
    nameWithType: IPlayerSerializer.GetAsync
    fullName: NetScape.Abstractions.FileSystem.IPlayerSerializer.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NetScape.Abstractions.FileSystem.IPlayerSerializer.GetAsync(System.String)
    name: GetAsync
    nameWithType: IPlayerSerializer.GetAsync
    fullName: NetScape.Abstractions.FileSystem.IPlayerSerializer.GetAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{NetScape.Abstractions.Model.Game.Player}
  commentId: T:System.Threading.Tasks.Task{NetScape.Abstractions.Model.Game.Player}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Player>
  nameWithType: Task<Player>
  fullName: System.Threading.Tasks.Task<NetScape.Abstractions.Model.Game.Player>
  nameWithType.vb: Task(Of Player)
  fullName.vb: System.Threading.Tasks.Task(Of NetScape.Abstractions.Model.Game.Player)
  name.vb: Task(Of Player)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NetScape.Abstractions.Model.Game.Player
    name: Player
    nameWithType: Player
    fullName: NetScape.Abstractions.Model.Game.Player
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NetScape.Abstractions.Model.Game.Player
    name: Player
    nameWithType: Player
    fullName: NetScape.Abstractions.Model.Game.Player
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.AddOrUpdateAsync*
  commentId: Overload:NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.AddOrUpdateAsync
  name: AddOrUpdateAsync
  nameWithType: EntityFrameworkPlayerSerializer.AddOrUpdateAsync
  fullName: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.AddOrUpdateAsync
- uid: NetScape.Abstractions.FileSystem.IPlayerSerializer.AddOrUpdateAsync(NetScape.Abstractions.Model.Game.Player)
  commentId: M:NetScape.Abstractions.FileSystem.IPlayerSerializer.AddOrUpdateAsync(NetScape.Abstractions.Model.Game.Player)
  parent: NetScape.Abstractions.FileSystem.IPlayerSerializer
  name: AddOrUpdateAsync(Player)
  nameWithType: IPlayerSerializer.AddOrUpdateAsync(Player)
  fullName: NetScape.Abstractions.FileSystem.IPlayerSerializer.AddOrUpdateAsync(NetScape.Abstractions.Model.Game.Player)
  spec.csharp:
  - uid: NetScape.Abstractions.FileSystem.IPlayerSerializer.AddOrUpdateAsync(NetScape.Abstractions.Model.Game.Player)
    name: AddOrUpdateAsync
    nameWithType: IPlayerSerializer.AddOrUpdateAsync
    fullName: NetScape.Abstractions.FileSystem.IPlayerSerializer.AddOrUpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: NetScape.Abstractions.Model.Game.Player
    name: Player
    nameWithType: Player
    fullName: NetScape.Abstractions.Model.Game.Player
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: NetScape.Abstractions.FileSystem.IPlayerSerializer.AddOrUpdateAsync(NetScape.Abstractions.Model.Game.Player)
    name: AddOrUpdateAsync
    nameWithType: IPlayerSerializer.AddOrUpdateAsync
    fullName: NetScape.Abstractions.FileSystem.IPlayerSerializer.AddOrUpdateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: NetScape.Abstractions.Model.Game.Player
    name: Player
    nameWithType: Player
    fullName: NetScape.Abstractions.Model.Game.Player
  - name: )
    nameWithType: )
    fullName: )
- uid: NetScape.Abstractions.Model.Game.Player
  commentId: T:NetScape.Abstractions.Model.Game.Player
  parent: NetScape.Abstractions.Model.Game
  name: Player
  nameWithType: Player
  fullName: NetScape.Abstractions.Model.Game.Player
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NetScape.Abstractions.Model.Game
  commentId: N:NetScape.Abstractions.Model.Game
  name: NetScape.Abstractions.Model.Game
  nameWithType: NetScape.Abstractions.Model.Game
  fullName: NetScape.Abstractions.Model.Game
- uid: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetOrCreateAsync*
  commentId: Overload:NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetOrCreateAsync
  name: GetOrCreateAsync
  nameWithType: EntityFrameworkPlayerSerializer.GetOrCreateAsync
  fullName: NetScape.Modules.DAL.EntityFrameworkPlayerSerializer.GetOrCreateAsync
- uid: PlayerCredentials
  isExternal: true
  name: PlayerCredentials
  nameWithType: PlayerCredentials
  fullName: PlayerCredentials
