### YamlMime:ManagedReference
items:
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache
  commentId: T:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache
  id: IReferenceTableCache
  parent: NetScape.Abstractions.Interfaces.Cache
  children:
  - NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.CachedReferenceTables
  - NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.FlushCachedReferenceTables
  - NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFile``1(NetScape.Abstractions.Cache.CacheIndex,System.Int32)
  - NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileIds(NetScape.Abstractions.Cache.CacheIndex)
  - NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileInfo(NetScape.Abstractions.Cache.CacheIndex,System.Int32)
  - NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetIndexes
  - NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetReferenceTable(NetScape.Abstractions.Cache.CacheIndex,System.Boolean)
  langs:
  - csharp
  - vb
  name: IReferenceTableCache
  nameWithType: IReferenceTableCache
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache
  type: Interface
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: IReferenceTableCache
    path: src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
    startLine: 7
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Interfaces.Cache
  syntax:
    content: 'public interface IReferenceTableCache : IDisposable'
    content.vb: >-
      Public Interface IReferenceTableCache
          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.CachedReferenceTables
  commentId: P:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.CachedReferenceTables
  id: CachedReferenceTables
  parent: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache
  langs:
  - csharp
  - vb
  name: CachedReferenceTables
  nameWithType: IReferenceTableCache.CachedReferenceTables
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.CachedReferenceTables
  type: Property
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: CachedReferenceTables
    path: src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
    startLine: 9
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Interfaces.Cache
  syntax:
    content: ConcurrentDictionary<CacheIndex, ReferenceTableFile> CachedReferenceTables { get; set; }
    parameters: []
    return:
      type: System.Collections.Concurrent.ConcurrentDictionary{NetScape.Abstractions.Cache.CacheIndex,NetScape.Abstractions.Cache.ReferenceTableFile}
    content.vb: Property CachedReferenceTables As ConcurrentDictionary(Of CacheIndex, ReferenceTableFile)
  overload: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.CachedReferenceTables*
  modifiers.csharp:
  - get
  - set
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.FlushCachedReferenceTables
  commentId: M:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.FlushCachedReferenceTables
  id: FlushCachedReferenceTables
  parent: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache
  langs:
  - csharp
  - vb
  name: FlushCachedReferenceTables()
  nameWithType: IReferenceTableCache.FlushCachedReferenceTables()
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.FlushCachedReferenceTables()
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: FlushCachedReferenceTables
    path: src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
    startLine: 10
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Interfaces.Cache
  syntax:
    content: void FlushCachedReferenceTables()
    content.vb: Sub FlushCachedReferenceTables
  overload: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.FlushCachedReferenceTables*
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileIds(NetScape.Abstractions.Cache.CacheIndex)
  commentId: M:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileIds(NetScape.Abstractions.Cache.CacheIndex)
  id: GetFileIds(NetScape.Abstractions.Cache.CacheIndex)
  parent: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache
  langs:
  - csharp
  - vb
  name: GetFileIds(CacheIndex)
  nameWithType: IReferenceTableCache.GetFileIds(CacheIndex)
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileIds(NetScape.Abstractions.Cache.CacheIndex)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: GetFileIds
    path: src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
    startLine: 11
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Interfaces.Cache
  syntax:
    content: IEnumerable<int> GetFileIds(CacheIndex index)
    parameters:
    - id: index
      type: NetScape.Abstractions.Cache.CacheIndex
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
    content.vb: Function GetFileIds(index As CacheIndex) As IEnumerable(Of Integer)
  overload: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileIds*
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileInfo(NetScape.Abstractions.Cache.CacheIndex,System.Int32)
  commentId: M:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileInfo(NetScape.Abstractions.Cache.CacheIndex,System.Int32)
  id: GetFileInfo(NetScape.Abstractions.Cache.CacheIndex,System.Int32)
  parent: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache
  langs:
  - csharp
  - vb
  name: GetFileInfo(CacheIndex, Int32)
  nameWithType: IReferenceTableCache.GetFileInfo(CacheIndex, Int32)
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileInfo(NetScape.Abstractions.Cache.CacheIndex, System.Int32)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: GetFileInfo
    path: src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
    startLine: 12
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Interfaces.Cache
  syntax:
    content: CacheFileInfo GetFileInfo(CacheIndex index, int fileId)
    parameters:
    - id: index
      type: NetScape.Abstractions.Cache.CacheIndex
    - id: fileId
      type: System.Int32
    return:
      type: NetScape.Abstractions.Cache.CacheFileInfo
    content.vb: Function GetFileInfo(index As CacheIndex, fileId As Integer) As CacheFileInfo
  overload: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileInfo*
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetReferenceTable(NetScape.Abstractions.Cache.CacheIndex,System.Boolean)
  commentId: M:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetReferenceTable(NetScape.Abstractions.Cache.CacheIndex,System.Boolean)
  id: GetReferenceTable(NetScape.Abstractions.Cache.CacheIndex,System.Boolean)
  parent: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache
  langs:
  - csharp
  - vb
  name: GetReferenceTable(CacheIndex, Boolean)
  nameWithType: IReferenceTableCache.GetReferenceTable(CacheIndex, Boolean)
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetReferenceTable(NetScape.Abstractions.Cache.CacheIndex, System.Boolean)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: GetReferenceTable
    path: src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
    startLine: 13
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Interfaces.Cache
  syntax:
    content: ReferenceTableFile GetReferenceTable(CacheIndex index, bool createIfNotFound = false)
    parameters:
    - id: index
      type: NetScape.Abstractions.Cache.CacheIndex
    - id: createIfNotFound
      type: System.Boolean
    return:
      type: NetScape.Abstractions.Cache.ReferenceTableFile
    content.vb: Function GetReferenceTable(index As CacheIndex, createIfNotFound As Boolean = False) As ReferenceTableFile
  overload: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetReferenceTable*
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFile``1(NetScape.Abstractions.Cache.CacheIndex,System.Int32)
  commentId: M:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFile``1(NetScape.Abstractions.Cache.CacheIndex,System.Int32)
  id: GetFile``1(NetScape.Abstractions.Cache.CacheIndex,System.Int32)
  parent: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache
  langs:
  - csharp
  - vb
  name: GetFile<T>(CacheIndex, Int32)
  nameWithType: IReferenceTableCache.GetFile<T>(CacheIndex, Int32)
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFile<T>(NetScape.Abstractions.Cache.CacheIndex, System.Int32)
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: GetFile
    path: src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
    startLine: 14
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Interfaces.Cache
  syntax:
    content: >-
      T GetFile<T>(CacheIndex index, int fileId)
          where T : CacheFileBase
    parameters:
    - id: index
      type: NetScape.Abstractions.Cache.CacheIndex
    - id: fileId
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Function GetFile(Of T As CacheFileBase)(index As CacheIndex, fileId As Integer) As T
  overload: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFile*
  nameWithType.vb: IReferenceTableCache.GetFile(Of T)(CacheIndex, Int32)
  fullName.vb: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFile(Of T)(NetScape.Abstractions.Cache.CacheIndex, System.Int32)
  name.vb: GetFile(Of T)(CacheIndex, Int32)
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetIndexes
  commentId: M:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetIndexes
  id: GetIndexes
  parent: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache
  langs:
  - csharp
  - vb
  name: GetIndexes()
  nameWithType: IReferenceTableCache.GetIndexes()
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetIndexes()
  type: Method
  source:
    remote:
      path: docfx_project/src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
      branch: master
      repo: https://github.com/JayArrowz/NetScape.git
    id: GetIndexes
    path: src/NetScape.Abstractions/Interfaces/Cache/IReferenceTableCache.cs
    startLine: 15
  assemblies:
  - NetScape.Abstractions
  namespace: NetScape.Abstractions.Interfaces.Cache
  syntax:
    content: IEnumerable<CacheIndex> GetIndexes()
    return:
      type: System.Collections.Generic.IEnumerable{NetScape.Abstractions.Cache.CacheIndex}
    content.vb: Function GetIndexes As IEnumerable(Of CacheIndex)
  overload: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetIndexes*
references:
- uid: NetScape.Abstractions.Interfaces.Cache
  commentId: N:NetScape.Abstractions.Interfaces.Cache
  name: NetScape.Abstractions.Interfaces.Cache
  nameWithType: NetScape.Abstractions.Interfaces.Cache
  fullName: NetScape.Abstractions.Interfaces.Cache
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.CachedReferenceTables*
  commentId: Overload:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.CachedReferenceTables
  name: CachedReferenceTables
  nameWithType: IReferenceTableCache.CachedReferenceTables
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.CachedReferenceTables
- uid: System.Collections.Concurrent.ConcurrentDictionary{NetScape.Abstractions.Cache.CacheIndex,NetScape.Abstractions.Cache.ReferenceTableFile}
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary{NetScape.Abstractions.Cache.CacheIndex,NetScape.Abstractions.Cache.ReferenceTableFile}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.ConcurrentDictionary`2
  name: ConcurrentDictionary<CacheIndex, ReferenceTableFile>
  nameWithType: ConcurrentDictionary<CacheIndex, ReferenceTableFile>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<NetScape.Abstractions.Cache.CacheIndex, NetScape.Abstractions.Cache.ReferenceTableFile>
  nameWithType.vb: ConcurrentDictionary(Of CacheIndex, ReferenceTableFile)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of NetScape.Abstractions.Cache.CacheIndex, NetScape.Abstractions.Cache.ReferenceTableFile)
  name.vb: ConcurrentDictionary(Of CacheIndex, ReferenceTableFile)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NetScape.Abstractions.Cache.CacheIndex
    name: CacheIndex
    nameWithType: CacheIndex
    fullName: NetScape.Abstractions.Cache.CacheIndex
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NetScape.Abstractions.Cache.ReferenceTableFile
    name: ReferenceTableFile
    nameWithType: ReferenceTableFile
    fullName: NetScape.Abstractions.Cache.ReferenceTableFile
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NetScape.Abstractions.Cache.CacheIndex
    name: CacheIndex
    nameWithType: CacheIndex
    fullName: NetScape.Abstractions.Cache.CacheIndex
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: NetScape.Abstractions.Cache.ReferenceTableFile
    name: ReferenceTableFile
    nameWithType: ReferenceTableFile
    fullName: NetScape.Abstractions.Cache.ReferenceTableFile
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary`2
  isExternal: true
  name: ConcurrentDictionary<TKey, TValue>
  nameWithType: ConcurrentDictionary<TKey, TValue>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  nameWithType.vb: ConcurrentDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.ConcurrentDictionary`2
    name: ConcurrentDictionary
    nameWithType: ConcurrentDictionary
    fullName: System.Collections.Concurrent.ConcurrentDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Concurrent
  commentId: N:System.Collections.Concurrent
  isExternal: true
  name: System.Collections.Concurrent
  nameWithType: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.FlushCachedReferenceTables*
  commentId: Overload:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.FlushCachedReferenceTables
  name: FlushCachedReferenceTables
  nameWithType: IReferenceTableCache.FlushCachedReferenceTables
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.FlushCachedReferenceTables
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileIds*
  commentId: Overload:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileIds
  name: GetFileIds
  nameWithType: IReferenceTableCache.GetFileIds
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileIds
- uid: NetScape.Abstractions.Cache.CacheIndex
  commentId: T:NetScape.Abstractions.Cache.CacheIndex
  parent: NetScape.Abstractions.Cache
  name: CacheIndex
  nameWithType: CacheIndex
  fullName: NetScape.Abstractions.Cache.CacheIndex
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Int32>
  nameWithType: IEnumerable<Int32>
  fullName: System.Collections.Generic.IEnumerable<System.Int32>
  nameWithType.vb: IEnumerable(Of Int32)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Int32)
  name.vb: IEnumerable(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: NetScape.Abstractions.Cache
  commentId: N:NetScape.Abstractions.Cache
  name: NetScape.Abstractions.Cache
  nameWithType: NetScape.Abstractions.Cache
  fullName: NetScape.Abstractions.Cache
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileInfo*
  commentId: Overload:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileInfo
  name: GetFileInfo
  nameWithType: IReferenceTableCache.GetFileInfo
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFileInfo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: NetScape.Abstractions.Cache.CacheFileInfo
  commentId: T:NetScape.Abstractions.Cache.CacheFileInfo
  parent: NetScape.Abstractions.Cache
  name: CacheFileInfo
  nameWithType: CacheFileInfo
  fullName: NetScape.Abstractions.Cache.CacheFileInfo
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetReferenceTable*
  commentId: Overload:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetReferenceTable
  name: GetReferenceTable
  nameWithType: IReferenceTableCache.GetReferenceTable
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetReferenceTable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: NetScape.Abstractions.Cache.ReferenceTableFile
  commentId: T:NetScape.Abstractions.Cache.ReferenceTableFile
  parent: NetScape.Abstractions.Cache
  name: ReferenceTableFile
  nameWithType: ReferenceTableFile
  fullName: NetScape.Abstractions.Cache.ReferenceTableFile
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFile*
  commentId: Overload:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFile
  name: GetFile
  nameWithType: IReferenceTableCache.GetFile
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetFile
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetIndexes*
  commentId: Overload:NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetIndexes
  name: GetIndexes
  nameWithType: IReferenceTableCache.GetIndexes
  fullName: NetScape.Abstractions.Interfaces.Cache.IReferenceTableCache.GetIndexes
- uid: System.Collections.Generic.IEnumerable{NetScape.Abstractions.Cache.CacheIndex}
  commentId: T:System.Collections.Generic.IEnumerable{NetScape.Abstractions.Cache.CacheIndex}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CacheIndex>
  nameWithType: IEnumerable<CacheIndex>
  fullName: System.Collections.Generic.IEnumerable<NetScape.Abstractions.Cache.CacheIndex>
  nameWithType.vb: IEnumerable(Of CacheIndex)
  fullName.vb: System.Collections.Generic.IEnumerable(Of NetScape.Abstractions.Cache.CacheIndex)
  name.vb: IEnumerable(Of CacheIndex)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: NetScape.Abstractions.Cache.CacheIndex
    name: CacheIndex
    nameWithType: CacheIndex
    fullName: NetScape.Abstractions.Cache.CacheIndex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: NetScape.Abstractions.Cache.CacheIndex
    name: CacheIndex
    nameWithType: CacheIndex
    fullName: NetScape.Abstractions.Cache.CacheIndex
  - name: )
    nameWithType: )
    fullName: )
